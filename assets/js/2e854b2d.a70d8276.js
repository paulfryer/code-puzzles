"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7765],{1470:(e,n,i)=>{i.d(n,{A:()=>C});var t=i(6540),a=i(4164),r=i(3104),s=i(6347),o=i(205),l=i(7485),c=i(1682),d=i(679);function h(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:i}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:i,default:t}})=>({value:e,label:n,attributes:i,default:t}))}(i);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,i])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const i=(0,s.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(a),(0,t.useCallback)(e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})},[a,i])]}function g(e){const{defaultValue:n,queryString:i=!1,groupId:a}=e,r=u(e),[s,l]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=n.find(e=>e.default)??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r})),[c,h]=p({queryString:i,groupId:a}),[g,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[i,a]=(0,d.Dv)(n);return[i,(0,t.useCallback)(e=>{n&&a.set(e)},[n,a])]}({groupId:a}),j=(()=>{const e=c??g;return m({value:e,tabValues:r})?e:null})();(0,o.A)(()=>{j&&l(j)},[j]);return{selectedValue:s,selectValue:(0,t.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)},[h,x,r]),tabValues:r}}var x=i(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=i(4848);function f({className:e,block:n,selectedValue:i,selectValue:t,tabValues:s}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const n=e.currentTarget,a=o.indexOf(n),r=s[a].value;r!==i&&(l(n),t(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=o.indexOf(e.currentTarget)+1;n=o[i]??o[0];break}case"ArrowLeft":{const i=o.indexOf(e.currentTarget)-1;n=o[i]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:s.map(({value:e,label:n,attributes:t})=>(0,b.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...t,className:(0,a.A)("tabs__item",j.tabItem,t?.className,{"tabs__item--active":i===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:i}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===i);return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function y(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",j.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(v,{...n,...e})]})}function C(e){const n=(0,x.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(n))}},4888:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"puzzles/change-in-a-foreign-currency","title":"Change in a Foreign Currency","description":"Problem Statement","source":"@site/docs/puzzles/change-in-a-foreign-currency.mdx","sourceDirName":"puzzles","slug":"/puzzles/change-in-a-foreign-currency","permalink":"/code-puzzles/docs/puzzles/change-in-a-foreign-currency","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/change-in-a-foreign-currency.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Balanced Split","permalink":"/code-puzzles/docs/puzzles/balanced-split"},"next":{"title":"Contiguous Subarrays","permalink":"/code-puzzles/docs/puzzles/contiguous-subarrays"}}');var a=i(4848),r=i(8453),s=i(1470),o=i(9365);const l={},c="Change in a Foreign Currency",d={},h=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Mathematical Foundation",id:"mathematical-foundation",level:2},{value:"Approach Evolution",id:"approach-evolution",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Recursive Solution with Memoization",id:"recursive-solution-with-memoization",level:3},{value:"Optimized Bottom-Up DP Solution",id:"optimized-bottom-up-dp-solution",level:3},{value:"Algorithm Walkthrough",id:"algorithm-walkthrough",level:2},{value:"GCD Optimization Deep Dive",id:"gcd-optimization-deep-dive",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Time Complexity",id:"time-complexity",level:3},{value:"Space Complexity",id:"space-complexity",level:3},{value:"Edge Cases &amp; Testing",id:"edge-cases--testing",level:2},{value:"Interview Strategy",id:"interview-strategy",level:2},{value:"What Interviewers Look For",id:"what-interviewers-look-for",level:3},{value:"Common Follow-Ups",id:"common-follow-ups",level:3},{value:"Advanced Extensions",id:"advanced-extensions",level:2},{value:"1. <strong>Minimum Coins Needed</strong>",id:"1-minimum-coins-needed",level:3},{value:"2. <strong>Count Ways to Make Change</strong>",id:"2-count-ways-to-make-change",level:3},{value:"3. <strong>Limited Coin Supply</strong>",id:"3-limited-coin-supply",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Practice Problems",id:"practice-problems",level:2}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"change-in-a-foreign-currency",children:"Change in a Foreign Currency"})}),"\n","\n",(0,a.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,a.jsxs)(n.p,{children:["Given a list of available ",(0,a.jsx)(n.strong,{children:"coin denominations"})," in a foreign currency, determine whether it's possible to receive ",(0,a.jsx)(n.strong,{children:"exact change"})," for a target amount of money. This is a classic variation of the coin change problem where you need to determine ",(0,a.jsx)(n.strong,{children:"feasibility"})," rather than find the optimal solution."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Function Signature"}),": ",(0,a.jsx)(n.code,{children:"bool CanGetExactChange(int targetMoney, int[] denominations)"}),(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.strong,{children:"Input"}),": Target amount and array of available coin denominations",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.strong,{children:"Output"}),": ",(0,a.jsx)(n.code,{children:"true"})," if exact change is possible, ",(0,a.jsx)(n.code,{children:"false"})," otherwise"]}),"\n",(0,a.jsxs)(n.admonition,{title:"Real-World Applications",type:"tip",children:[(0,a.jsx)(n.p,{children:"This algorithm is essential for:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ATM Systems"}),": Determining if exact withdrawal amounts are possible"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Vending Machines"}),": Checking if correct change can be dispensed"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Point of Sale Systems"}),": Currency exchange and change validation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Game Development"}),": In-game currency and shop mechanics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Financial Software"}),": International payment processing"]}),"\n"]})]}),"\n",(0,a.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Understand the coin change problem and dynamic programming applications"}),"\n",(0,a.jsx)(n.li,{children:"Master unbounded knapsack problem variations"}),"\n",(0,a.jsx)(n.li,{children:"Apply mathematical number theory concepts (GCD) for optimization"}),"\n",(0,a.jsx)(n.li,{children:"Practice space-efficient dynamic programming techniques"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"mathematical-foundation",children:"Mathematical Foundation"}),"\n",(0,a.jsxs)(n.p,{children:["This problem asks: ",(0,a.jsxs)(n.strong,{children:["Can we express ",(0,a.jsx)(n.code,{children:"targetMoney"})," as a non-negative integer linear combination of the given denominations?"]})]}),"\n",(0,a.jsxs)(n.p,{children:["Mathematically, we need integers ",(0,a.jsx)(n.code,{children:"a\u2081, a\u2082, ..., a\u2099 \u2265 0"})," such that:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"a\u2081 \xd7 d\u2081 + a\u2082 \xd7 d\u2082 + ... + a\u2099 \xd7 d\u2099 = targetMoney\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For example, with denominations ",(0,a.jsx)(n.code,{children:"[4, 17, 29]"})," and target ",(0,a.jsx)(n.code,{children:"75"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"75 = 0\xd74 + 1\xd717 + 2\xd729 = 0 + 17 + 58 = 75"})," \u2705"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"approach-evolution",children:"Approach Evolution"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(o.A,{value:"naive",label:"\u274c Naive Recursion",children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Brute Force"}),": Try every combination recursively"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"bool CanMake(int amount) {\n    if (amount == 0) return true;\n    if (amount < 0) return false;\n    \n    foreach (int coin in denominations) {\n        if (CanMake(amount - coin)) return true;\n    }\n    return false;\n}\n"})}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Issues"}),": Exponential time, repeated subproblems"]})]}),(0,a.jsxs)(o.A,{value:"memo",label:"\u2705 With Memoization",children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Top-Down DP"}),": Cache results to avoid recomputation"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Time: O(target \xd7 denominations)"}),"\n",(0,a.jsx)(n.li,{children:"Space: O(target) + recursion stack"}),"\n",(0,a.jsx)(n.li,{children:"Good but uses recursion"}),"\n"]})]}),(0,a.jsxs)(o.A,{value:"optimized",label:"\ud83d\ude80 Bottom-Up DP",children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Iterative DP"}),": Build solutions from ground up"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Time: O(target \xd7 denominations)"}),"\n",(0,a.jsx)(n.li,{children:"Space: O(target)"}),"\n",(0,a.jsx)(n.li,{children:"Most efficient approach"}),"\n"]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"recursive-solution-with-memoization",children:"Recursive Solution with Memoization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:'title="ForeignCurrencyRecursive.cs"',children:"using System;\nusing System.Linq;\n\nclass ForeignCurrency \n{\n    static void Main(string[] args) \n    {\n        // Test cases\n        Console.WriteLine(CanGetExactChange(94, new int[] {5, 10, 25, 100, 200})); // False\n        Console.WriteLine(CanGetExactChange(75, new int[] {4, 17, 29})); // True\n        Console.WriteLine(CanGetExactChange(0, new int[] {5, 10})); // True (base case)\n    }\n\n    private static bool CanGetExactChange(int targetMoney, int[] denominations) \n    {\n        // Use nullable bool array for memoization\n        return CanMakeAmountRecursive(targetMoney, denominations, \n                                    new bool?[targetMoney + 1]);\n    }\n    \n    private static bool CanMakeAmountRecursive(int amount, int[] denominations, bool?[] memo) \n    {\n        // Base cases\n        if (amount == 0) return true;\n        if (amount < 0) return false;\n        \n        // Check memo\n        if (memo[amount] != null) return memo[amount].Value;\n        \n        // Try each denomination\n        foreach (int denom in denominations) \n        {\n            if (CanMakeAmountRecursive(amount - denom, denominations, memo)) \n            {\n                memo[amount] = true;\n                return true;\n            }\n        }\n        \n        // Cache and return false\n        memo[amount] = false;\n        return false;\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Complexity"}),": O(target \xd7 denominations) time, O(target) space + recursion stack"]}),"\n",(0,a.jsx)(n.h3,{id:"optimized-bottom-up-dp-solution",children:"Optimized Bottom-Up DP Solution"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:'title="ForeignCurrencyOptimized.cs"',children:"using System;\nusing System.Linq;\n\nclass ForeignCurrency \n{\n    static void Main(string[] args) \n    {\n        // Test cases\n        Console.WriteLine(CanGetExactChange(94, new int[] {5, 10, 25, 100, 200})); // False\n        Console.WriteLine(CanGetExactChange(75, new int[] {4, 17, 29})); // True\n        Console.WriteLine(CanGetExactChange(12, new int[] {3, 5})); // False\n        Console.WriteLine(CanGetExactChange(15, new int[] {3, 5})); // True\n    }\n\n    private static bool CanGetExactChange(int targetMoney, int[] denominations) \n    {\n        if (targetMoney == 0) return true;\n        if (denominations.Length == 0) return false;\n        \n        // GCD Optimization: Early termination check\n        int gcd = denominations[0];\n        for (int i = 1; i < denominations.Length; i++) \n        {\n            gcd = FindGCD(gcd, denominations[i]);\n        }\n        \n        // If GCD doesn't divide target, impossible to make exact change\n        if (targetMoney % gcd != 0) \n        {\n            return false;\n        }\n        \n        // Dynamic Programming approach\n        bool[] dp = new bool[targetMoney + 1];\n        dp[0] = true; // Base case: 0 amount is always achievable\n        \n        // For each denomination (order doesn't matter for feasibility)\n        foreach (int denom in denominations) \n        {\n            // Update all amounts that can be formed using this denomination\n            for (int amount = denom; amount <= targetMoney; amount++) \n            {\n                if (dp[amount - denom]) \n                {\n                    dp[amount] = true;\n                }\n            }\n        }\n        \n        return dp[targetMoney];\n    }\n    \n    private static int FindGCD(int a, int b) \n    {\n        while (b != 0) \n        {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Complexity"}),": O(target \xd7 denominations) time, O(target) space"]}),"\n",(0,a.jsx)(n.h2,{id:"algorithm-walkthrough",children:"Algorithm Walkthrough"}),"\n",(0,a.jsxs)(n.p,{children:["Let's trace through ",(0,a.jsx)(n.code,{children:"CanGetExactChange(12, [3, 5])"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Initial: dp = [T, F, F, F, F, F, F, F, F, F, F, F, F]\n         Index: 0  1  2  3  4  5  6  7  8  9  10 11 12\n\nProcess denomination 3:\namount=3:  dp[3] = dp[0] = true  \u2192 dp[3] = T\namount=6:  dp[6] = dp[3] = true  \u2192 dp[6] = T  \namount=9:  dp[9] = dp[6] = true  \u2192 dp[9] = T\namount=12: dp[12] = dp[9] = true \u2192 dp[12] = T\n\nResult: dp = [T, F, F, T, F, F, T, F, F, T, F, F, T]\ndp[12] = true \u2705 Can make 12 with coins [3,5]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And for ",(0,a.jsx)(n.code,{children:"CanGetExactChange(11, [3, 5])"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"After processing [3, 5]:\ndp = [T, F, F, T, F, T, T, F, T, T, T, F]\n      0  1  2  3  4  5  6  7  8  9 10 11\n\ndp[11] = false \u274c Cannot make 11 with coins [3,5]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"gcd-optimization-deep-dive",children:"GCD Optimization Deep Dive"}),"\n",(0,a.jsxs)(n.admonition,{title:"Mathematical Insight",type:"info",children:[(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"gcd(d\u2081, d\u2082, ..., d\u2099) = g"}),", then any achievable amount must be divisible by ",(0,a.jsx)(n.code,{children:"g"}),"."]}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Example"}),": Denominations ",(0,a.jsx)(n.code,{children:"[6, 9, 15]"})]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"gcd(6, 9, 15) = 3"})}),"\n",(0,a.jsxs)(n.li,{children:["Can only make amounts: ",(0,a.jsx)(n.code,{children:"0, 3, 6, 9, 12, 15, 18, ..."})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cannot make"}),": ",(0,a.jsx)(n.code,{children:"1, 2, 4, 5, 7, 8, 10, 11, 13, 14, ..."})]}),"\n"]}),(0,a.jsxs)(n.p,{children:["This provides ",(0,a.jsx)(n.strong,{children:"instant rejection"})," for impossible targets!"]})]}),"\n",(0,a.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,a.jsx)(n.h3,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Phase"}),(0,a.jsx)(n.th,{children:"Complexity"}),(0,a.jsx)(n.th,{children:"Explanation"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"GCD Calculation"})}),(0,a.jsx)(n.td,{children:"O(d \xd7 log M)"}),(0,a.jsx)(n.td,{children:"d denominations, M = max denomination"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"DP Computation"})}),(0,a.jsx)(n.td,{children:"O(T \xd7 d)"}),(0,a.jsx)(n.td,{children:"T = target, d = denominations"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Overall"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"O(T \xd7 d)"})}),(0,a.jsx)(n.td,{children:"DP phase dominates"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DP Array"}),": O(T) to store achievable amounts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Additional Variables"}),": O(1)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Total Space"}),": ",(0,a.jsx)(n.strong,{children:"O(T)"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"edge-cases--testing",children:"Edge Cases & Testing"}),"\n",(0,a.jsx)(n.admonition,{title:"Critical Test Cases",type:"warning",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Essential test cases for your implementation:\n\nCanGetExactChange(0, new int[] {})         // \u2705 true  - zero target\nCanGetExactChange(5, new int[] {})         // \u274c false - no denominations\nCanGetExactChange(7, new int[] {2, 4})     // \u274c false - GCD=2, 7%2\u22600\nCanGetExactChange(1, new int[] {5, 10})    // \u274c false - denominations too large\nCanGetExactChange(15, new int[] {3, 5})    // \u2705 true  - 3\xd75 = 15\nCanGetExactChange(1, new int[] {1})        // \u2705 true  - trivial case\nCanGetExactChange(100, new int[] {3, 5})   // \u2705 true  - large achievable amount\n"})})}),"\n",(0,a.jsx)(n.h2,{id:"interview-strategy",children:"Interview Strategy"}),"\n",(0,a.jsx)(n.h3,{id:"what-interviewers-look-for",children:"What Interviewers Look For"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Problem Recognition"}),': "This is the unbounded knapsack feasibility problem"']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Optimization Awareness"}),": GCD check for early termination"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DP Pattern Understanding"}),": Bottom-up vs top-down approaches"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Edge Case Handling"}),": Empty arrays, zero targets, impossible cases"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"common-follow-ups",children:"Common Follow-Ups"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"variants",label:"Problem Variants",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:'"Find minimum coins needed"'})," \u2192 Change to track counts, not just feasibility"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:'"Count number of ways"'})," \u2192 DP state becomes sum instead of boolean"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:'"Limited coin supply"'})," \u2192 2D DP with coin count constraints"]}),"\n"]})}),(0,a.jsx)(o.A,{value:"optimizations",label:"Optimizations",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:'"Can we do better than O(T\xd7d)?"'})," \u2192 No for general case, but GCD helps"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:'"What if target is very large?"'})," \u2192 Consider mathematical properties"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:'"Memory-constrained environments?"'})," \u2192 Rolling array optimizations"]}),"\n"]})})]}),"\n",(0,a.jsx)(n.h2,{id:"advanced-extensions",children:"Advanced Extensions"}),"\n",(0,a.jsxs)(n.h3,{id:"1-minimum-coins-needed",children:["1. ",(0,a.jsx)(n.strong,{children:"Minimum Coins Needed"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public int MinCoinsForChange(int target, int[] denominations) \n{\n    // DP tracking minimum coin counts instead of feasibility\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"2-count-ways-to-make-change",children:["2. ",(0,a.jsx)(n.strong,{children:"Count Ways to Make Change"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public long CountWaysToMakeChange(int target, int[] denominations) \n{\n    // DP accumulating number of combinations\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"3-limited-coin-supply",children:["3. ",(0,a.jsx)(n.strong,{children:"Limited Coin Supply"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public bool CanMakeChangeWithLimits(int target, int[] denoms, int[] limits) \n{\n    // 2D DP considering coin count constraints  \n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,a.jsxs)(n.p,{children:["\u2705 ",(0,a.jsx)(n.strong,{children:"Mathematical insight"})," - GCD analysis provides powerful early termination",(0,a.jsx)(n.br,{}),"\n","\u2705 ",(0,a.jsx)(n.strong,{children:"DP pattern mastery"})," - Unbounded knapsack is a fundamental algorithm pattern",(0,a.jsx)(n.br,{}),"\n","\u2705 ",(0,a.jsx)(n.strong,{children:"Space efficiency"})," - Bottom-up DP avoids recursion stack overhead",(0,a.jsx)(n.br,{}),"\n","\u2705 ",(0,a.jsx)(n.strong,{children:"Real-world relevance"})," - Direct applications in financial and retail systems",(0,a.jsx)(n.br,{}),"\n","\u2705 ",(0,a.jsx)(n.strong,{children:"Optimization potential"})," - Mathematical properties can dramatically improve performance"]}),"\n",(0,a.jsx)(n.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,a.jsx)(n.p,{children:"Build your expertise with these related challenges:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/coin-change/",children:(0,a.jsx)(n.strong,{children:"Coin Change"})})," - Find minimum coins needed"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/coin-change-2/",children:(0,a.jsx)(n.strong,{children:"Coin Change 2"})})," - Count ways to make change"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/perfect-squares/",children:(0,a.jsx)(n.strong,{children:"Perfect Squares"})})," - Special case with square numbers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/combination-sum/",children:(0,a.jsx)(n.strong,{children:"Combination Sum"})})," - Find all combinations that sum to target"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"This classic dynamic programming problem teaches essential techniques for resource allocation, optimization, and mathematical reasoning that apply broadly across computer science and real-world systems."})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},9365:(e,n,i)=>{i.d(n,{A:()=>s});i(6540);var t=i(4164);const a={tabItem:"tabItem_Ymn6"};var r=i(4848);function s({children:e,hidden:n,className:i}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,i),hidden:n,children:e})}}}]);