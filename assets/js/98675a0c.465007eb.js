"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[504],{1470:(e,n,t)=>{t.d(n,{A:()=>w});var i=t(6540),r=t(4164),s=t(3104),a=t(6347),l=t(205),o=t(7485),c=t(1682),d=t(679);function u(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(r),(0,i.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=h(e),[a,o]=(0,i.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s})),[c,u]=m({queryString:t,groupId:r}),[g,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,d.Dv)(n);return[t,(0,i.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),j=(()=>{const e=c??g;return p({value:e,tabValues:s})?e:null})();(0,l.A)(()=>{j&&o(j)},[j]);return{selectedValue:a,selectValue:(0,i.useCallback)(e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)},[u,x,s]),tabValues:s}}var x=t(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function v({className:e,block:n,selectedValue:t,selectValue:i,tabValues:a}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),c=e=>{const n=e.currentTarget,r=l.indexOf(n),s=a[r].value;s!==t&&(o(n),i(s))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:i})=>(0,f.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...i,className:(0,r.A)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function b({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===t);return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function y(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...n,...e}),(0,f.jsx)(b,{...n,...e})]})}function w(e){const n=(0,x.A)();return(0,f.jsx)(y,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},8697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"puzzles/largest-triple-products","title":"Largest Triple Products","description":"Problem Statement","source":"@site/docs/puzzles/largest-triple-products.mdx","sourceDirName":"puzzles","slug":"/puzzles/largest-triple-products","permalink":"/docs/puzzles/largest-triple-products","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/largest-triple-products.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Encrypted Words","permalink":"/docs/puzzles/encrypted-words"},"next":{"title":"Magical Candy Bars","permalink":"/docs/puzzles/magical-candy-bars"}}');var r=t(4848),s=t(8453),a=t(1470),l=t(9365);const o={},c="Largest Triple Products",d={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Visual Understanding",id:"visual-understanding",level:2},{value:"Min-Heap Visualization",id:"min-heap-visualization",level:3},{value:"Approach Breakdown",id:"approach-breakdown",level:2},{value:"Why Use a Min-Heap?",id:"why-use-a-min-heap",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Step-by-Step Solution",id:"step-by-step-solution",level:3},{value:"Optimized Array-Based Solution",id:"optimized-array-based-solution",level:3},{value:"Manual Insertion Sort Version",id:"manual-insertion-sort-version",level:3},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Time Complexity: <strong>O(n log k)</strong> where k = 3",id:"time-complexity-on-log-k-where-k--3",level:3},{value:"Space Complexity: <strong>O(1)</strong>",id:"space-complexity-o1",level:3},{value:"Edge Cases Deep Dive",id:"edge-cases-deep-dive",level:2},{value:"Duplicate Handling",id:"duplicate-handling",level:3},{value:"Interview Strategy",id:"interview-strategy",level:2},{value:"What Interviewers Look For",id:"what-interviewers-look-for",level:3},{value:"Follow-Up Questions",id:"follow-up-questions",level:3},{value:"Advanced Variations",id:"advanced-variations",level:2},{value:"1. <strong>Configurable K Elements</strong>",id:"1-configurable-k-elements",level:3},{value:"2. <strong>Sliding Window Version</strong>",id:"2-sliding-window-version",level:3},{value:"3. <strong>Min and Max Products</strong>",id:"3-min-and-max-products",level:3},{value:"4. <strong>Stream Processing</strong>",id:"4-stream-processing",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Practice Problems",id:"practice-problems",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"largest-triple-products",children:"Largest Triple Products"})}),"\n","\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given a list of n integers ",(0,r.jsx)(n.code,{children:"arr[0..(n-1)]"}),", compute a list ",(0,r.jsx)(n.code,{children:"output[0..(n-1)]"})," such that for each index i (between 0 and n-1, inclusive), ",(0,r.jsx)(n.code,{children:"output[i]"})," equals the ",(0,r.jsx)(n.strong,{children:"product of the three largest elements"})," from ",(0,r.jsx)(n.code,{children:"arr[0..i]"}),". If ",(0,r.jsx)(n.code,{children:"i < 2"})," (fewer than three elements available), ",(0,r.jsx)(n.code,{children:"output[i]"})," should be ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that the three largest elements used to form any product may have the same values as one another, but they must be at ",(0,r.jsx)(n.strong,{children:"different indices"})," in arr."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Function Signature"}),": ",(0,r.jsx)(n.code,{children:"int[] findMaxProduct(int[] arr)"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Input"}),": Array of n integers where n is in range [1, 100,000] and each ",(0,r.jsx)(n.code,{children:"arr[i]"})," is in range [1, 1,000]",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Output"}),": Array of n integers as described above"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Real-World Applications",type:"tip",children:[(0,r.jsx)(n.p,{children:"This algorithm pattern appears in:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Financial Analysis"}),": Top-N revenue/profit calculations in streaming data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Gaming Leaderboards"}),": Maintaining top players' scores dynamically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"E-commerce"}),": Finding highest-rated product combinations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Analytics"}),": Computing running statistics in real-time systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recommendation Systems"}),": Tracking most popular items"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Master heap data structure for maintaining top-k elements efficiently"}),"\n",(0,r.jsx)(n.li,{children:"Understand priority queues and their applications in streaming algorithms"}),"\n",(0,r.jsx)(n.li,{children:"Learn to handle partial results when insufficient data is available"}),"\n",(0,r.jsx)(n.li,{children:"Practice sliding window techniques with dynamic element tracking"}),"\n",(0,r.jsx)(n.li,{children:"Apply min-heap optimization for finding maximum elements"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"visual-understanding",children:"Visual Understanding"}),"\n",(0,r.jsxs)(n.p,{children:["Let's trace through example: ",(0,r.jsx)(n.code,{children:"[1, 2, 3, 4, 5]"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Position 0: [1]           \u2192 Less than 3 elements \u2192 -1\nPosition 1: [1, 2]        \u2192 Less than 3 elements \u2192 -1  \nPosition 2: [1, 2, 3]     \u2192 Top 3: [1, 2, 3] \u2192 Product: 1\xd72\xd73 = 6\nPosition 3: [1, 2, 3, 4]  \u2192 Top 3: [2, 3, 4] \u2192 Product: 2\xd73\xd74 = 24\nPosition 4: [1, 2, 3, 4, 5] \u2192 Top 3: [3, 4, 5] \u2192 Product: 3\xd74\xd75 = 60\n\nResult: [-1, -1, 6, 24, 60]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"min-heap-visualization",children:"Min-Heap Visualization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Processing arr = [2, 1, 4, 3, 5]:\n\nStep 1: Add 2 \u2192 Heap: [2] \u2192 Size < 3 \u2192 Output: -1\nStep 2: Add 1 \u2192 Heap: [1, 2] \u2192 Size < 3 \u2192 Output: -1  \nStep 3: Add 4 \u2192 Heap: [1, 2, 4] \u2192 Size = 3 \u2192 Product: 1\xd72\xd74 = 8\nStep 4: Add 3 \u2192 Heap: [2, 3, 4] \u2192 Size = 3 \u2192 Product: 2\xd73\xd74 = 24\n        (1 was removed as it's smaller than 3)\nStep 5: Add 5 \u2192 Heap: [3, 4, 5] \u2192 Size = 3 \u2192 Product: 3\xd74\xd75 = 60\n        (2 was removed as it's smaller than 5)\n\nFinal Output: [-1, -1, 8, 24, 60]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"approach-breakdown",children:"Approach Breakdown"}),"\n",(0,r.jsx)(n.h3,{id:"why-use-a-min-heap",children:"Why Use a Min-Heap?"}),"\n",(0,r.jsxs)(n.p,{children:["The largest triple products problem perfectly demonstrates ",(0,r.jsx)(n.strong,{children:"streaming top-k"})," algorithms:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Updates"}),": As new elements arrive, efficiently maintain top 3"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Efficiency"}),": Only store k elements, not entire history"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast Access"}),": O(1) access to minimum of top-k elements"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Efficient Insertion"}),": O(log k) to add/remove elements"]}),"\n"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsxs)(l.A,{value:"naive",label:"\u274c Naive Approach",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sort Every Time"}),": Re-sort elements at each position"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// This is O(n\xb2log n) - very inefficient!\nfor (int i = 0; i < n; i++) {\n    var subArray = arr.Take(i + 1).OrderByDescending(x => x).ToArray();\n    if (subArray.Length < 3) {\n        output[i] = -1;\n    } else {\n        output[i] = subArray[0] * subArray[1] * subArray[2];\n    }\n}\n"})})]}),(0,r.jsxs)(l.A,{value:"optimal",label:"\u2705 Optimal Approach",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Min-Heap of Size 3"}),": Maintain exactly the top 3 elements"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var minHeap = new SortedSet<(int value, int index)>();\n// Always keep heap size \u2264 3\n// Remove minimum when size > 3\n// Product of all elements when size = 3\n"})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"step-by-step-solution",children:"Step-by-Step Solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="LargestTripleProducts.cs"',children:'using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass LargestTripleProducts \n{\n    static void Main(string[] args) \n    {\n        // Test case 1: Ascending sequence\n        int[] arr1 = {1, 2, 3, 4, 5};\n        Console.WriteLine($"Input: [{string.Join(", ", arr1)}]");\n        Console.WriteLine($"Output: [{string.Join(", ", findMaxProduct(arr1))}]");\n        // Expected: [-1, -1, 6, 24, 60]\n        \n        // Test case 2: Mixed values with duplicates\n        int[] arr2 = {2, 1, 2, 1, 2};\n        Console.WriteLine($"Input: [{string.Join(", ", arr2)}]");\n        Console.WriteLine($"Output: [{string.Join(", ", findMaxProduct(arr2))}]");\n        // Expected: [-1, -1, 4, 4, 8]\n    }\n    \n    private static int[] findMaxProduct(int[] arr) \n    {\n        int n = arr.Length;\n        int[] output = new int[n];\n        \n        // Min-heap to store the 3 largest elements\n        // Use (value, index) tuple to handle duplicates correctly\n        var minHeap = new SortedSet<(int value, int index)>();\n        \n        for (int i = 0; i < n; i++) \n        {\n            // Add current element with its index for uniqueness\n            minHeap.Add((arr[i], i));\n            \n            // Keep only the 3 largest elements\n            if (minHeap.Count > 3) \n            {\n                // Remove the smallest element (min of min-heap)\n                minHeap.Remove(minHeap.Min);\n            }\n            \n            // Check if we have enough elements for a triple product\n            if (minHeap.Count < 3) \n            {\n                output[i] = -1;\n            } \n            else \n            {\n                // Calculate product of all 3 elements in heap\n                int product = 1;\n                foreach (var element in minHeap) \n                {\n                    product *= element.value;\n                }\n                output[i] = product;\n            }\n        }\n        \n        return output;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"optimized-array-based-solution",children:"Optimized Array-Based Solution"}),"\n",(0,r.jsx)(n.p,{children:"Since we only need to track 3 elements, we can optimize with a simple array:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="LargestTripleProductsOptimized.cs"',children:'using System;\n\nclass LargestTripleProducts \n{\n    private static int[] findMaxProduct(int[] arr) \n    {\n        int n = arr.Length;\n        int[] output = new int[n];\n        int[] top3 = new int[3]; // Store 3 largest values in sorted order\n        int count = 0; // Number of elements we\'ve seen\n        \n        for (int i = 0; i < n; i++) \n        {\n            // Add current element to our top-3 tracking\n            if (count < 3) \n            {\n                // Still filling initial elements\n                top3[count] = arr[i];\n                count++;\n                // Keep array sorted (ascending order)\n                Array.Sort(top3, 0, count);\n            } \n            else \n            {\n                // Replace smallest if current is larger\n                if (arr[i] > top3[0]) \n                {\n                    top3[0] = arr[i];\n                    // Re-sort to maintain order (only 3 elements!)\n                    Array.Sort(top3);\n                }\n            }\n            \n            // Calculate result for current position\n            if (count < 3) \n            {\n                output[i] = -1;\n            } \n            else \n            {\n                // Product of all three elements\n                output[i] = top3[0] * top3[1] * top3[2];\n            }\n        }\n        \n        return output;\n    }\n    \n    static void Main(string[] args) \n    {\n        // Test with edge cases\n        TestCase(new int[] {1, 2, 3, 4, 5}, "Ascending");\n        TestCase(new int[] {5, 4, 3, 2, 1}, "Descending");  \n        TestCase(new int[] {1}, "Single element");\n        TestCase(new int[] {3, 3, 3, 3}, "All same");\n        TestCase(new int[] {1, 2}, "Two elements");\n    }\n    \n    private static void TestCase(int[] arr, string description) \n    {\n        int[] result = findMaxProduct(arr);\n        Console.WriteLine($"{description}: [{string.Join(", ", arr)}] \u2192 [{string.Join(", ", result)}]");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"manual-insertion-sort-version",children:"Manual Insertion Sort Version"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="ManualSort.cs" ',children:"// For educational purposes - manual sorting of 3 elements\nprivate static void InsertIntoTop3(int[] top3, int count, int newValue) \n{\n    if (count < 3) {\n        // Add to available slot\n        top3[count] = newValue;\n        // Insertion sort to maintain order\n        for (int i = count; i > 0 && top3[i] < top3[i-1]; i--) {\n            (top3[i], top3[i-1]) = (top3[i-1], top3[i]); // Swap\n        }\n    } else if (newValue > top3[0]) {\n        // Replace smallest (top3[0]) and re-sort\n        top3[0] = newValue;\n        // Bubble the new element to correct position\n        for (int i = 1; i < 3 && top3[i-1] > top3[i]; i++) {\n            (top3[i], top3[i-1]) = (top3[i-1], top3[i]); // Swap\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsxs)(n.h3,{id:"time-complexity-on-log-k-where-k--3",children:["Time Complexity: ",(0,r.jsx)(n.strong,{children:"O(n log k)"})," where k = 3"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Approach"}),(0,r.jsx)(n.th,{children:"Time Complexity"}),(0,r.jsx)(n.th,{children:"Explanation"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Heap-based"})}),(0,r.jsx)(n.td,{children:"O(n log 3) = O(n)"}),(0,r.jsx)(n.td,{children:"Each heap operation is O(log 3) = O(1)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Array-based"})}),(0,r.jsx)(n.td,{children:"O(n)"}),(0,r.jsx)(n.td,{children:"Sorting 3 elements is O(1) constant time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Naive sorting"})}),(0,r.jsx)(n.td,{children:"O(n\xb2 log n)"}),(0,r.jsx)(n.td,{children:"Re-sort entire prefix at each step"})]})]})]}),"\n",(0,r.jsxs)(n.h3,{id:"space-complexity-o1",children:["Space Complexity: ",(0,r.jsx)(n.strong,{children:"O(1)"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Heap approach"}),": Stores at most 3 elements regardless of input size"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Array approach"}),": Uses exactly 3 integers for tracking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Output space"}),": O(n) but required by problem specification"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"edge-cases-deep-dive",children:"Edge Cases Deep Dive"}),"\n",(0,r.jsx)(n.admonition,{title:"Critical Test Cases",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Test your implementation with these scenarios:\n\nfindMaxProduct([1])           // [-1] - single element\nfindMaxProduct([3, 8])        // [-1, -1] - two elements  \nfindMaxProduct([1, 2, 3])     // [-1, -1, 6] - exactly three\nfindMaxProduct([5, 5, 5, 5])  // [-1, -1, 125, 125] - duplicates\nfindMaxProduct([1, 2, 3, 4, 5])  // [-1, -1, 6, 24, 60] - ascending\nfindMaxProduct([5, 4, 3, 2, 1])  // [-1, -1, 60, 60, 60] - descending\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"duplicate-handling",children:"Duplicate Handling"}),"\n",(0,r.jsxs)(n.p,{children:["The problem specifies that elements must be from ",(0,r.jsx)(n.strong,{children:"different indices"}),", which our tuple approach ",(0,r.jsx)(n.code,{children:"(value, index)"})," handles correctly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Input: [5, 5, 5] (same values, different indices)\n// Position 2: Uses elements at indices 0, 1, 2\n// Product: 5 \xd7 5 \xd7 5 = 125 \u2705\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interview-strategy",children:"Interview Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"what-interviewers-look-for",children:"What Interviewers Look For"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern Recognition"}),': "This is a streaming top-k problem"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Structure Choice"}),": Min-heap vs array-based optimization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Edge Case Handling"}),": Insufficient elements, duplicates, boundary conditions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimization Awareness"}),": When k is small, consider simpler approaches"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"follow-up-questions",children:"Follow-Up Questions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"What if k changes to 5 largest elements?"'})," \u2192 Scale heap approach"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"How would you handle negative numbers?"'})," \u2192 Same algorithm works"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"Can you do this without extra space?"'})," \u2192 Not efficiently - we need to track top-k"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"What about memory constraints for large k?"'})," \u2192 Discuss space-time tradeoffs"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-variations",children:"Advanced Variations"}),"\n",(0,r.jsxs)(n.h3,{id:"1-configurable-k-elements",children:["1. ",(0,r.jsx)(n.strong,{children:"Configurable K Elements"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Generalize to top-k elements instead of hardcoded 3\npublic int[] FindMaxProductTopK(int[] arr, int k) { /* implement */ }\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-sliding-window-version",children:["2. ",(0,r.jsx)(n.strong,{children:"Sliding Window Version"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Find max product in each sliding window of size w\npublic int[] MaxProductSlidingWindow(int[] arr, int windowSize) { /* implement */ }\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-min-and-max-products",children:["3. ",(0,r.jsx)(n.strong,{children:"Min and Max Products"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Track both minimum and maximum products of top-3\npublic (int[] min, int[] max) FindMinMaxProducts(int[] arr) { /* implement */ }\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"4-stream-processing",children:["4. ",(0,r.jsx)(n.strong,{children:"Stream Processing"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Process elements one by one in a streaming fashion\npublic class StreamingTripleProduct {\n    public void AddElement(int value) { /* implement */ }\n    public int GetCurrentProduct() { /* implement */ }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Min-heap pattern"})," perfect for maintaining top-k elements dynamically",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Streaming algorithms"})," process data incrementally without storing history",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Constant optimization"})," when k is small, array-based can outperform heap",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Index tracking"})," essential for handling duplicate values correctly",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Edge case mastery"})," handling insufficient data gracefully"]}),"\n",(0,r.jsx)(n.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,r.jsx)(n.p,{children:"Master these related challenges:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/kth-largest-element-in-a-stream/",children:(0,r.jsx)(n.strong,{children:"Kth Largest Element in a Stream"})})," - Classic streaming top-k"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/sliding-window-maximum/",children:(0,r.jsx)(n.strong,{children:"Sliding Window Maximum"})})," - Deque-based optimization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/top-k-frequent-elements/",children:(0,r.jsx)(n.strong,{children:"Top K Frequent Elements"})})," - Heap + frequency counting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-k-closest-elements/",children:(0,r.jsx)(n.strong,{children:"Find K Closest Elements"})})," - Distance-based top-k"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-product-subarray/",children:(0,r.jsx)(n.strong,{children:"Maximum Product Subarray"})})," - Dynamic programming variant"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"This problem showcases the power of heaps in streaming algorithms, where maintaining running statistics efficiently as data arrives is crucial for real-time systems and competitive programming success!"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var s=t(4848);function a({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,t),hidden:n,children:e})}}}]);