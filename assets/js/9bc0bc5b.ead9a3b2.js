"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5763],{1470:(e,n,r)=>{r.d(n,{A:()=>C});var t=r(6540),i=r(4164),s=r(3104),a=r(6347),o=r(205),l=r(7485),d=r(1682),c=r(679);function u(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:r,default:t}})=>({value:e,label:n,attributes:r,default:t}))}(r);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const r=(0,a.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(i),(0,t.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})},[i,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,s=h(e),[a,l]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s})),[d,u]=m({queryString:r,groupId:i}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,i]=(0,c.Dv)(n);return[r,(0,t.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),b=(()=>{const e=d??x;return p({value:e,tabValues:s})?e:null})();(0,o.A)(()=>{b&&l(b)},[b]);return{selectedValue:a,selectValue:(0,t.useCallback)(e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)},[u,g,s]),tabValues:s}}var g=r(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(4848);function v({className:e,block:n,selectedValue:r,selectValue:t,tabValues:a}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),d=e=>{const n=e.currentTarget,i=o.indexOf(n),s=a[i].value;s!==r&&(l(n),t(s))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:t})=>(0,j.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{o.push(e)},onKeyDown:c,onClick:d,...t,className:(0,i.A)("tabs__item",b.tabItem,t?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:r}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===r);return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function y(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,j.jsx)(v,{...n,...e}),(0,j.jsx)(f,{...n,...e})]})}function C(e){const n=(0,g.A)();return(0,j.jsx)(y,{...e,children:u(e.children)},String(n))}},2790:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"puzzles/nodes-in-a-subtree","title":"Nodes in a Subtree","description":"Problem Statement","source":"@site/docs/puzzles/nodes-in-a-subtree.mdx","sourceDirName":"puzzles","slug":"/puzzles/nodes-in-a-subtree","permalink":"/docs/puzzles/nodes-in-a-subtree","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/nodes-in-a-subtree.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Minimizing Permutations","permalink":"/docs/puzzles/minimizing-permutations"},"next":{"title":"Number of Visible Nodes","permalink":"/docs/puzzles/number-of-visible-nodes"}}');var i=r(4848),s=r(8453),a=r(1470),o=r(9365);const l={},d="Nodes in a Subtree",c={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Visual Understanding",id:"visual-understanding",level:2},{value:"Query Examples:",id:"query-examples",level:3},{value:"Approach Breakdown",id:"approach-breakdown",level:2},{value:"Why DFS for Subtree Operations?",id:"why-dfs-for-subtree-operations",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Step-by-Step DFS Solution",id:"step-by-step-dfs-solution",level:3},{value:"Optimized Preprocessing Solution",id:"optimized-preprocessing-solution",level:3},{value:"Tree Flattening Solution",id:"tree-flattening-solution",level:3},{value:"Memory-Optimized Solution",id:"memory-optimized-solution",level:3},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Time Complexity",id:"time-complexity",level:3},{value:"Space Complexity",id:"space-complexity",level:3},{value:"Edge Cases Deep Dive",id:"edge-cases-deep-dive",level:2},{value:"Index Mapping Pitfalls",id:"index-mapping-pitfalls",level:3},{value:"Interview Strategy",id:"interview-strategy",level:2},{value:"What Interviewers Look For",id:"what-interviewers-look-for",level:3},{value:"Follow-Up Questions",id:"follow-up-questions",level:3},{value:"Advanced Variations",id:"advanced-variations",level:2},{value:"1. <strong>Path Queries</strong>",id:"1-path-queries",level:3},{value:"2. <strong>Dynamic Updates</strong>",id:"2-dynamic-updates",level:3},{value:"3. <strong>Multiple Character Queries</strong>",id:"3-multiple-character-queries",level:3},{value:"4. <strong>Weighted Queries</strong>",id:"4-weighted-queries",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Practice Problems",id:"practice-problems",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"nodes-in-a-subtree",children:"Nodes in a Subtree"})}),"\n","\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Given a tree with N nodes where each node u corresponds to a character from string s (1-based indexing), answer Q queries. Each query ",(0,i.jsx)(n.code,{children:"[u, c]"})," asks for the ",(0,i.jsx)(n.strong,{children:"count of nodes in the subtree rooted at node u that contain character c"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Function Signature"}),": ",(0,i.jsx)(n.code,{children:"int[] countOfNodes(Node root, ArrayList<Query> queries, String s)"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Input"}),": Tree root, Q queries of type ",(0,i.jsx)(n.code,{children:"[u, c]"}),", string s of length N with lowercase letters",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Output"}),": Integer array with response to each query"]}),"\n",(0,i.jsxs)(n.admonition,{title:"Real-World Applications",type:"tip",children:[(0,i.jsx)(n.p,{children:"This tree query pattern appears in:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File System Analysis"}),": Count file types in directory subtrees"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organization Hierarchies"}),": Employee attributes within departmental trees"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Biological Phylogeny"}),": Species characteristics in evolutionary trees"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Network Topology"}),": Node properties within network segments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compiler Design"}),": Symbol table queries in nested scopes"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Master tree traversal algorithms (DFS) for subtree operations"}),"\n",(0,i.jsx)(n.li,{children:"Understand tree data structures and node representation"}),"\n",(0,i.jsx)(n.li,{children:"Learn efficient subtree query processing techniques"}),"\n",(0,i.jsx)(n.li,{children:"Practice mapping between different data representations"}),"\n",(0,i.jsx)(n.li,{children:"Apply preprocessing strategies for query optimization"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"visual-understanding",children:"Visual Understanding"}),"\n",(0,i.jsx)(n.p,{children:"Let's trace through example tree:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Tree structure with characters:\n       1(a)\n      /     \\\n    2(b)    3(a)\n   /\n 4(c)\n\nString s = \"abac\" (1-indexed: s[1]='a', s[2]='b', s[3]='a', s[4]='c')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"query-examples",children:"Query Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Query [1, 'a']: Count 'a' in subtree rooted at node 1\n- Node 1: s[1] = 'a' \u2713 (count = 1)\n- Node 2: s[2] = 'b' \u2717 (count = 1) \n- Node 3: s[3] = 'a' \u2713 (count = 2)\n- Node 4: s[4] = 'c' \u2717 (count = 2)\nResult: 2\n\nQuery [2, 'b']: Count 'b' in subtree rooted at node 2  \n- Node 2: s[2] = 'b' \u2713 (count = 1)\n- Node 4: s[4] = 'c' \u2717 (count = 1)\nResult: 1\n\nQuery [4, 'c']: Count 'c' in subtree rooted at node 4\n- Node 4: s[4] = 'c' \u2713 (count = 1)\nResult: 1\n"})}),"\n",(0,i.jsx)(n.h2,{id:"approach-breakdown",children:"Approach Breakdown"}),"\n",(0,i.jsx)(n.h3,{id:"why-dfs-for-subtree-operations",children:"Why DFS for Subtree Operations?"}),"\n",(0,i.jsxs)(n.p,{children:["Tree subtree queries naturally fit the ",(0,i.jsx)(n.strong,{children:"Depth-First Search"})," pattern:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Subtree Definition"}),": All nodes reachable from root through descendant edges"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Natural Recursion"}),": DFS explores children before backtracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complete Coverage"}),": Ensures all subtree nodes are visited exactly once"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Efficient"}),": Uses call stack, no additional queue needed"]}),"\n"]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(o.A,{value:"naive",label:"\u274c Naive Approach",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Query-by-Query Tree Traversal"}),": Traverse entire subtree for each query"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// O(Q \xd7 N) - inefficient for multiple queries on same subtree\nforeach (var query in queries) {\n    int count = 0;\n    TraverseSubtree(GetNode(query.nodeId), query.targetChar, ref count);\n    results.Add(count);\n}\n// Problem: Repeated work for overlapping subtrees\n"})})]}),(0,i.jsxs)(o.A,{value:"optimized",label:"\u2705 Optimized Approaches",children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Option 1: Preprocessing with Character Counts"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// O(N + Q) - precompute all character counts per subtree\nDictionary<int, Dictionary<char, int>> subtreeCounts;\nPrecomputeAllCharacterCounts(root);\n// Answer queries in O(1) each\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Option 2: DFS with Memoization"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Cache results for repeated subtree queries\nDictionary<(int nodeId, char c), int> memo;\n"})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"step-by-step-dfs-solution",children:"Step-by-Step DFS Solution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="NodesInSubtree.cs"',children:"using System;\nusing System.Collections.Generic;\n\npublic class TreeNode \n{\n    public int val;\n    public List<TreeNode> children;\n    \n    public TreeNode(int val) \n    {\n        this.val = val;\n        this.children = new List<TreeNode>();\n    }\n}\n\npublic class Query \n{\n    public int nodeId;\n    public char targetChar;\n    \n    public Query(int nodeId, char targetChar) \n    {\n        this.nodeId = nodeId;\n        this.targetChar = targetChar;\n    }\n}\n\nclass NodesInSubtree \n{\n    static void Main(string[] args) \n    {\n        // Test case: Build tree from example\n        //       1\n        //      / \\\n        //     2   3\n        //    /\n        //   4\n        \n        var root = new TreeNode(1);\n        var node2 = new TreeNode(2);\n        var node3 = new TreeNode(3);\n        var node4 = new TreeNode(4);\n        \n        root.children.Add(node2);\n        root.children.Add(node3);\n        node2.children.Add(node4);\n        \n        // Character string: s = \"abac\" (1-indexed)\n        string s = \"abac\";\n        \n        var queries = new List<Query> \n        {\n            new Query(1, 'a'),  // Expected: 2\n            new Query(2, 'b'),  // Expected: 1  \n            new Query(4, 'c')   // Expected: 1\n        };\n        \n        int[] results = countOfNodes(root, queries, s);\n        for (int i = 0; i < results.Length; i++) \n        {\n            Console.WriteLine($\"Query [{queries[i].nodeId}, '{queries[i].targetChar}'] = {results[i]}\");\n        }\n    }\n    \n    private static int[] countOfNodes(TreeNode root, List<Query> queries, string s) \n    {\n        // Build node mapping for quick lookup by ID\n        var nodeMap = new Dictionary<int, TreeNode>();\n        BuildNodeMap(root, nodeMap);\n        \n        // Process each query using DFS\n        var results = new int[queries.Count];\n        for (int i = 0; i < queries.Count; i++) \n        {\n            var query = queries[i];\n            var targetNode = nodeMap[query.nodeId];\n            results[i] = CountCharacterInSubtree(targetNode, query.targetChar, s);\n        }\n        \n        return results;\n    }\n    \n    private static void BuildNodeMap(TreeNode node, Dictionary<int, TreeNode> nodeMap) \n    {\n        if (node == null) return;\n        \n        nodeMap[node.val] = node;\n        foreach (var child in node.children) \n        {\n            BuildNodeMap(child, nodeMap);\n        }\n    }\n    \n    private static int CountCharacterInSubtree(TreeNode node, char targetChar, string s) \n    {\n        if (node == null) return 0;\n        \n        int count = 0;\n        \n        // Check current node's character (convert 1-based to 0-based indexing)\n        char nodeChar = s[node.val - 1];\n        if (nodeChar == targetChar) \n        {\n            count++;\n        }\n        \n        // Recursively count in all child subtrees\n        foreach (var child in node.children) \n        {\n            count += CountCharacterInSubtree(child, targetChar, s);\n        }\n        \n        return count;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"optimized-preprocessing-solution",children:"Optimized Preprocessing Solution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="OptimizedNodesInSubtree.cs"',children:"using System;\nusing System.Collections.Generic;\n\nclass OptimizedNodesInSubtree \n{\n    private static Dictionary<int, TreeNode> nodeMap;\n    private static Dictionary<int, Dictionary<char, int>> subtreeCharCounts;\n    \n    private static int[] countOfNodes(TreeNode root, List<Query> queries, string s) \n    {\n        nodeMap = new Dictionary<int, TreeNode>();\n        subtreeCharCounts = new Dictionary<int, Dictionary<char, int>>();\n        \n        // Build node mapping\n        BuildNodeMap(root, nodeMap);\n        \n        // Precompute character counts for all subtrees\n        PrecomputeCharacterCounts(root, s);\n        \n        // Answer queries using precomputed data  \n        var results = new int[queries.Count];\n        for (int i = 0; i < queries.Count; i++) \n        {\n            var query = queries[i];\n            if (subtreeCharCounts.ContainsKey(query.nodeId) && \n                subtreeCharCounts[query.nodeId].ContainsKey(query.targetChar)) \n            {\n                results[i] = subtreeCharCounts[query.nodeId][query.targetChar];\n            } \n            else \n            {\n                results[i] = 0;\n            }\n        }\n        \n        return results;\n    }\n    \n    private static void BuildNodeMap(TreeNode node, Dictionary<int, TreeNode> map) \n    {\n        if (node == null) return;\n        \n        map[node.val] = node;\n        foreach (var child in node.children) \n        {\n            BuildNodeMap(child, map);\n        }\n    }\n    \n    // Precompute character counts for all subtrees using DFS\n    private static Dictionary<char, int> PrecomputeCharacterCounts(TreeNode node, string s) \n    {\n        if (node == null) return new Dictionary<char, int>();\n        \n        var charCounts = new Dictionary<char, int>();\n        \n        // Add current node's character\n        char nodeChar = s[node.val - 1]; // Convert 1-based to 0-based\n        charCounts[nodeChar] = charCounts.GetValueOrDefault(nodeChar, 0) + 1;\n        \n        // Add counts from all child subtrees\n        foreach (var child in node.children) \n        {\n            var childCounts = PrecomputeCharacterCounts(child, s);\n            foreach (var pair in childCounts) \n            {\n                charCounts[pair.Key] = charCounts.GetValueOrDefault(pair.Key, 0) + pair.Value;\n            }\n        }\n        \n        // Cache the result for this subtree\n        subtreeCharCounts[node.val] = charCounts;\n        \n        return charCounts;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"tree-flattening-solution",children:"Tree Flattening Solution"}),"\n",(0,i.jsx)(n.p,{children:"For advanced optimization, flatten tree using DFS in/out times:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="FlattenedTreeSolution.cs"',children:"class FlattenedNodesInSubtree \n{\n    private static int[] countOfNodes(TreeNode root, List<Query> queries, string s) \n    {\n        // Flatten tree using DFS traversal to get in/out times\n        var inTime = new Dictionary<int, int>();\n        var outTime = new Dictionary<int, int>();\n        var dfsOrder = new List<int>();\n        \n        int timer = 0;\n        FlattenTree(root, inTime, outTime, dfsOrder, ref timer);\n        \n        // Process queries using flattened representation\n        var results = new int[queries.Count];\n        for (int i = 0; i < queries.Count; i++) \n        {\n            var query = queries[i];\n            results[i] = CountInRange(dfsOrder, inTime[query.nodeId], \n                                     outTime[query.nodeId], query.targetChar, s);\n        }\n        \n        return results;\n    }\n    \n    private static void FlattenTree(TreeNode node, Dictionary<int, int> inTime, \n                                   Dictionary<int, int> outTime, List<int> dfsOrder, ref int timer) \n    {\n        if (node == null) return;\n        \n        // Enter time for this node\n        inTime[node.val] = timer++;\n        dfsOrder.Add(node.val);\n        \n        // Visit all children\n        foreach (var child in node.children) \n        {\n            FlattenTree(child, inTime, outTime, dfsOrder, ref timer);\n        }\n        \n        // Exit time for this node\n        outTime[node.val] = timer - 1;\n    }\n    \n    private static int CountInRange(List<int> dfsOrder, int start, int end, \n                                   char targetChar, string s) \n    {\n        int count = 0;\n        for (int i = start; i <= end; i++) \n        {\n            int nodeId = dfsOrder[i];\n            if (s[nodeId - 1] == targetChar) \n            {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"memory-optimized-solution",children:"Memory-Optimized Solution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="MemoryOptimizedSolution.cs"',children:"class MemoryOptimizedNodesInSubtree \n{\n    // Use iterative DFS to avoid recursion stack overhead\n    private static int CountIterative(TreeNode root, int targetNodeId, char targetChar, string s) \n    {\n        // Find target node first\n        TreeNode targetNode = FindNode(root, targetNodeId);\n        if (targetNode == null) return 0;\n        \n        // Iterative DFS using explicit stack\n        var stack = new Stack<TreeNode>();\n        stack.Push(targetNode);\n        \n        int count = 0;\n        while (stack.Count > 0) \n        {\n            TreeNode current = stack.Pop();\n            \n            // Check current node\n            if (s[current.val - 1] == targetChar) \n            {\n                count++;\n            }\n            \n            // Add children to stack\n            foreach (var child in current.children) \n            {\n                stack.Push(child);\n            }\n        }\n        \n        return count;\n    }\n    \n    private static TreeNode FindNode(TreeNode root, int targetId) \n    {\n        if (root == null) return null;\n        if (root.val == targetId) return root;\n        \n        foreach (var child in root.children) \n        {\n            TreeNode found = FindNode(child, targetId);\n            if (found != null) return found;\n        }\n        \n        return null;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,i.jsx)(n.h3,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Approach"}),(0,i.jsx)(n.th,{children:"Time"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Naive DFS"})}),(0,i.jsx)(n.td,{children:"O(Q \xd7 N)"}),(0,i.jsx)(n.td,{children:"Each query traverses entire subtree"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Preprocessing"})}),(0,i.jsx)(n.td,{children:"O(N + Q)"}),(0,i.jsx)(n.td,{children:"Precompute once, answer queries in O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Flattened Tree"})}),(0,i.jsx)(n.td,{children:"O(N + Q \xd7 subtree_size)"}),(0,i.jsx)(n.td,{children:"Better for sparse queries"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Iterative DFS"})}),(0,i.jsx)(n.td,{children:"O(Q \xd7 subtree_size)"}),(0,i.jsx)(n.td,{children:"Same as recursive but avoids stack"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Space"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Node Mapping"})}),(0,i.jsx)(n.td,{children:"O(N)"}),(0,i.jsx)(n.td,{children:"Store all nodes in hash map"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Preprocessing"})}),(0,i.jsx)(n.td,{children:"O(N \xd7 26)"}),(0,i.jsx)(n.td,{children:"Character counts per node"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Recursion Stack"})}),(0,i.jsx)(n.td,{children:"O(height)"}),(0,i.jsx)(n.td,{children:"DFS call stack depth"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Query Results"})}),(0,i.jsx)(n.td,{children:"O(Q)"}),(0,i.jsx)(n.td,{children:"Output array"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"edge-cases-deep-dive",children:"Edge Cases Deep Dive"}),"\n",(0,i.jsx)(n.admonition,{title:"Critical Test Cases",type:"warning",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Test comprehensive edge cases:\n\n// Single node tree\nTree: 1(a), Query: [1, 'a'] \u2192 1\nTree: 1(a), Query: [1, 'b'] \u2192 0\n\n// Linear tree (path)\nTree: 1(a)\u21922(b)\u21923(a), Query: [1, 'a'] \u2192 2\n\n// All same character\nTree: 1(x)\u21922(x)\u21923(x), Query: [1, 'x'] \u2192 3\n\n// Large subtree vs small subtree queries\nTree: Complex with varying subtree sizes\n\n// Character not in subtree\nQuery for character that doesn't exist anywhere in subtree \u2192 0\n"})})}),"\n",(0,i.jsx)(n.h3,{id:"index-mapping-pitfalls",children:"Index Mapping Pitfalls"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// CRITICAL: Handle 1-based vs 0-based indexing correctly\n\n// Node IDs are 1-based: node 1, node 2, node 3, ...\n// String indexing is 0-based: s[0], s[1], s[2], ...\n\n// Correct mapping:\nchar nodeChar = s[node.val - 1]; // Convert 1-based to 0-based\n\n// Common mistakes:\nchar nodeChar = s[node.val];     // \u274c Index out of bounds!\nchar nodeChar = s[node.val + 1]; // \u274c Wrong character!\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interview-strategy",children:"Interview Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"what-interviewers-look-for",children:"What Interviewers Look For"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tree Traversal Mastery"}),": Natural use of DFS for subtree operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Index Handling"}),": Correct mapping between node IDs and string indices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimization Awareness"}),": Understanding trade-offs between approaches"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Case Coverage"}),": Handling empty subtrees, missing characters"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"follow-up-questions",children:"Follow-Up Questions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'"What if queries come online?"'})," \u2192 Discuss preprocessing vs on-demand"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'"How would you handle updates?"'})," \u2192 Dynamic tree modifications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'"Can you optimize for repeated queries?"'})," \u2192 Caching and memoization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'"What about range queries on paths?"'})," \u2192 LCA and path decomposition"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-variations",children:"Advanced Variations"}),"\n",(0,i.jsxs)(n.h3,{id:"1-path-queries",children:["1. ",(0,i.jsx)(n.strong,{children:"Path Queries"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Count characters on path between two nodes\npublic int CountOnPath(TreeNode root, int u, int v, char c) { /* implement */ }\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-dynamic-updates",children:["2. ",(0,i.jsx)(n.strong,{children:"Dynamic Updates"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Update node characters and maintain query efficiency\npublic class DynamicTreeQueries {\n    public void UpdateNode(int nodeId, char newChar) { /* implement */ }\n    public int Query(int nodeId, char c) { /* implement */ }\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"3-multiple-character-queries",children:["3. ",(0,i.jsx)(n.strong,{children:"Multiple Character Queries"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Count multiple characters in single query\npublic int[] CountMultipleChars(TreeNode root, int nodeId, char[] chars) { /* implement */ }\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"4-weighted-queries",children:["4. ",(0,i.jsx)(n.strong,{children:"Weighted Queries"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Nodes have weights, return weighted sum instead of count\npublic int WeightedQuery(TreeNode root, int nodeId, char c, int[] weights) { /* implement */ }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"DFS is natural"})," for subtree operations and tree traversal problems",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Preprocessing pays off"})," when multiple queries target same subtrees",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Index mapping is critical"})," - always verify 1-based vs 0-based conversion",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Space-time trade-offs"})," exist between preprocessing and on-demand computation",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Tree flattening"})," can convert tree problems to array problems for optimization"]}),"\n",(0,i.jsx)(n.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,i.jsx)(n.p,{children:"Master these related challenges:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/path-sum/",children:(0,i.jsx)(n.strong,{children:"Binary Tree Path Sum"})})," - DFS with target values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/count-good-nodes-in-binary-tree/",children:(0,i.jsx)(n.strong,{children:"Count Good Nodes in Binary Tree"})})," - Subtree properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/subtree-of-another-tree/",children:(0,i.jsx)(n.strong,{children:"Subtree of Another Tree"})})," - Tree matching in subtrees"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-cameras/",children:(0,i.jsx)(n.strong,{children:"Binary Tree Cameras"})})," - Advanced tree DP"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/",children:(0,i.jsx)(n.strong,{children:"Lowest Common Ancestor"})})," - Tree navigation fundamentals"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"This problem demonstrates fundamental tree traversal techniques and shows how different approaches trade off between preprocessing time, query time, and memory usage based on the specific query patterns!"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},9365:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var t=r(4164);const i={tabItem:"tabItem_Ymn6"};var s=r(4848);function a({children:e,hidden:n,className:r}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,r),hidden:n,children:e})}}}]);