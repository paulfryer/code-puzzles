"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[205],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9321:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"puzzles/counting-triangles","title":"Counting Triangles","description":"Problem Statement","source":"@site/docs/puzzles/counting-triangles.mdx","sourceDirName":"puzzles","slug":"/puzzles/counting-triangles","permalink":"/code-puzzles/docs/puzzles/counting-triangles","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/counting-triangles.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Contiguous Subarrays","permalink":"/code-puzzles/docs/puzzles/contiguous-subarrays"},"next":{"title":"Element Swapping","permalink":"/code-puzzles/docs/puzzles/element-swapping"}}');var i=t(4848),r=t(8453);const a={},l="Counting Triangles",o={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Key Insight",id:"key-insight",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"counting-triangles",children:"Counting Triangles"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Given a list of ",(0,i.jsx)(n.strong,{children:"N triangles"})," represented by their three side lengths, determine how many ",(0,i.jsx)(n.strong,{children:"distinct triangles"})," there are. Two triangles are considered identical if they are ",(0,i.jsx)(n.strong,{children:"congruent"})," (same shape and size, regardless of orientation)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Function Signature"}),": ",(0,i.jsx)(n.code,{children:"int CountDistinctTriangles(int[][] triangles)"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Input"}),": Array of triangles, each triangle represented as ",(0,i.jsx)(n.code,{children:"[side1, side2, side3]"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Output"}),": Number of distinct (unique) triangles"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input: ",(0,i.jsx)(n.code,{children:"[[2,2,3], [3,2,2], [2,5,6]]"})]}),"\n",(0,i.jsxs)(n.li,{children:["Output: ",(0,i.jsx)(n.code,{children:"2"})," (first two are the same triangle)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"key-insight",children:"Key Insight"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Two triangles are congruent if their corresponding sides are equal, regardless of order."})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[2,3,4]"}),", ",(0,i.jsx)(n.code,{children:"[3,4,2]"}),", and ",(0,i.jsx)(n.code,{children:"[4,2,3]"})," represent the ",(0,i.jsx)(n.strong,{children:"same triangle"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Normalize triangles by sorting their sides, then use a HashSet"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="CountingTriangles.cs"',children:'using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass CountingTriangles \n{\n    static void Main(string[] args) \n    {\n        var test1 = new int[][] { new int[] {2, 2, 3}, new int[] {3, 2, 2}, new int[] {2, 5, 6} };\n        Console.WriteLine(CountDistinctTriangles(test1)); // 2\n    }\n\n    private static int CountDistinctTriangles(int[][] triangles) \n    {\n        var uniqueTriangles = new HashSet<string>();\n        \n        foreach (var triangle in triangles) \n        {\n            // Normalize by sorting sides\n            Array.Sort(triangle);\n            \n            // Create canonical string representation\n            string normalized = $"{triangle[0]},{triangle[1]},{triangle[2]}";\n            uniqueTriangles.Add(normalized);\n        }\n        \n        return uniqueTriangles.Count;\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Complexity"}),": O(N log N) time, O(N) space"]}),"\n",(0,i.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Canonical representation"})," - Normalize data before comparison",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Hash-based deduplication"})," - Efficient uniqueness detection",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Geometric understanding"})," - Congruent triangles have same side lengths"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);