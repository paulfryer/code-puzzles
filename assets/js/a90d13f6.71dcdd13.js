"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[205],{1470:(e,t,n)=>{n.d(t,{A:()=>v});var i=n(6540),r=n(4164),s=n(3104),l=n(6347),a=n(205),o=n(7485),d=n(1682),c=n(679);function h(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function x(e){const{values:t,children:n}=e;return(0,i.useMemo)(()=>{const e=t??function(e){return h(e).map(({props:{value:e,label:t,attributes:n,default:i}})=>({value:e,label:t,attributes:n,default:i}))}(n);return function(e){const t=(0,d.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function u({value:e,tabValues:t}){return t.some(t=>t.value===e)}function g({queryString:e=!1,groupId:t}){const n=(0,l.W6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(r),(0,i.useCallback)(e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})},[r,n])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=x(e),[l,o]=(0,i.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s})),[d,h]=g({queryString:n,groupId:r}),[m,f]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,c.Dv)(t);return[n,(0,i.useCallback)(e=>{t&&r.set(e)},[t,r])]}({groupId:r}),p=(()=>{const e=d??m;return u({value:e,tabValues:s})?e:null})();(0,a.A)(()=>{p&&o(p)},[p]);return{selectedValue:l,selectValue:(0,i.useCallback)(e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),f(e)},[h,f,s]),tabValues:s}}var f=n(2303);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(4848);function y({className:e,block:t,selectedValue:n,selectValue:i,tabValues:l}){const a=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),d=e=>{const t=e.currentTarget,r=a.indexOf(t),s=l[r].value;s!==n&&(o(t),i(s))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;t=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;t=a[n]??a[a.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},e),children:l.map(({value:e,label:t,attributes:i})=>(0,j.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{a.push(e)},onKeyDown:c,onClick:d,...i,className:(0,r.A)("tabs__item",p.tabItem,i?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function b({lazy:e,children:t,selectedValue:n}){const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===n);return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function w(e){const t=m(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",p.tabList),children:[(0,j.jsx)(y,{...t,...e}),(0,j.jsx)(b,{...t,...e})]})}function v(e){const t=(0,f.A)();return(0,j.jsx)(w,{...e,children:h(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function l(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:t},e.children)}},9321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"puzzles/counting-triangles","title":"Counting Triangles","description":"Problem Statement","source":"@site/docs/puzzles/counting-triangles.mdx","sourceDirName":"puzzles","slug":"/puzzles/counting-triangles","permalink":"/code-puzzles/docs/puzzles/counting-triangles","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/counting-triangles.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Contiguous Subarrays","permalink":"/code-puzzles/docs/puzzles/contiguous-subarrays"},"next":{"title":"Element Swapping","permalink":"/code-puzzles/docs/puzzles/element-swapping"}}');var r=n(4848),s=n(8453),l=n(1470),a=n(9365);const o={},d="Counting Triangles",c={},h=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Visual Understanding",id:"visual-understanding",level:2},{value:"Triangle Congruence Visualization",id:"triangle-congruence-visualization",level:3},{value:"Visual Example: Finding Distinct Triangles",id:"visual-example-finding-distinct-triangles",level:3},{value:"Key Insight",id:"key-insight",level:2},{value:"The Sorting Strategy - A Visual Metaphor",id:"the-sorting-strategy---a-visual-metaphor",level:3},{value:"Step-by-Step Algorithm Visualization",id:"step-by-step-algorithm-visualization",level:2},{value:"Algorithm Flow",id:"algorithm-flow",level:3},{value:"Visual Walkthrough",id:"visual-walkthrough",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Optimized Implementation with Validation",id:"optimized-implementation-with-validation",level:3},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Time Complexity Visualization",id:"time-complexity-visualization",level:3},{value:"Edge Cases &amp; Validation",id:"edge-cases--validation",level:2},{value:"Triangle Inequality Theorem",id:"triangle-inequality-theorem",level:3},{value:"Practice Variations",id:"practice-variations",level:2},{value:"Extension Problems",id:"extension-problems",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Visual Summary",id:"visual-summary",level:3}];function x(e){const t={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"counting-triangles",children:"Counting Triangles"})}),"\n","\n",(0,r.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(t.p,{children:["Given a list of ",(0,r.jsx)(t.strong,{children:"N triangles"})," represented by their three side lengths, determine how many ",(0,r.jsx)(t.strong,{children:"distinct triangles"})," there are. Two triangles are considered identical if they are ",(0,r.jsx)(t.strong,{children:"congruent"})," (same shape and size, regardless of orientation)."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Function Signature"}),": ",(0,r.jsx)(t.code,{children:"int CountDistinctTriangles(int[][] triangles)"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Input"}),": Array of triangles, each triangle represented as ",(0,r.jsx)(t.code,{children:"[side1, side2, side3]"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Output"}),": Number of distinct (unique) triangles"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Input: ",(0,r.jsx)(t.code,{children:"[[2,2,3], [3,2,2], [2,5,6]]"})]}),"\n",(0,r.jsxs)(t.li,{children:["Output: ",(0,r.jsx)(t.code,{children:"2"})," (first two are the same triangle)"]}),"\n"]}),"\n",(0,r.jsxs)(t.admonition,{title:"Real-World Applications",type:"tip",children:[(0,r.jsx)(t.p,{children:"This pattern appears in:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Computer Graphics"}),": Mesh deduplication in 3D models"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"GIS Systems"}),": Identifying unique land parcels"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pattern Recognition"}),": Shape matching in computer vision"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Game Development"}),": Collision detection optimization"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Manufacturing"}),": Quality control for triangular components"]}),"\n"]})]}),"\n",(0,r.jsx)(t.h2,{id:"visual-understanding",children:"Visual Understanding"}),"\n",(0,r.jsx)(t.h3,{id:"triangle-congruence-visualization",children:"Triangle Congruence Visualization"}),"\n",(0,r.jsx)(t.mermaid,{value:'graph LR\n    subgraph "Different Representations"\n        T1["[2, 3, 4]<br/>Triangle ABC"]\n        T2["[3, 4, 2]<br/>Triangle BCA"]\n        T3["[4, 2, 3]<br/>Triangle CAB"]\n    end\n    \n    subgraph "Normalized Form"\n        N["[2, 3, 4]<br/>Sorted Sides"]\n    end\n    \n    T1 --\x3e N\n    T2 --\x3e N\n    T3 --\x3e N\n    \n    style N fill:#90EE90\n    style T1 fill:#FFE4B5\n    style T2 fill:#FFE4B5\n    style T3 fill:#FFE4B5'}),"\n",(0,r.jsx)(t.h3,{id:"visual-example-finding-distinct-triangles",children:"Visual Example: Finding Distinct Triangles"}),"\n",(0,r.jsxs)("svg",{viewBox:"0 0 800 400",xmlns:"http://www.w3.org/2000/svg",children:[(0,r.jsx)("text",{x:"400",y:"30","text-anchor":"middle","font-size":"20","font-weight":"bold",children:"Counting Distinct Triangles"}),(0,r.jsx)("text",{x:"100",y:"70","font-size":"14","font-weight":"bold",children:"Input Triangles:"}),(0,r.jsxs)("g",{transform:"translate(50, 100)",children:[(0,r.jsx)("polygon",{points:"0,0 40,0 20,35",fill:"#FFB6C1",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"20",y:"-10","text-anchor":"middle","font-size":"12",children:"[2, 2, 3]"}),(0,r.jsx)("text",{x:"20",y:"50","text-anchor":"middle","font-size":"10",children:"Triangle 1"})]}),(0,r.jsxs)("g",{transform:"translate(150, 100)",children:[(0,r.jsx)("polygon",{points:"0,0 40,0 20,35",fill:"#FFB6C1",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"20",y:"-10","text-anchor":"middle","font-size":"12",children:"[3, 2, 2]"}),(0,r.jsx)("text",{x:"20",y:"50","text-anchor":"middle","font-size":"10",children:"Triangle 2"})]}),(0,r.jsxs)("g",{transform:"translate(250, 100)",children:[(0,r.jsx)("polygon",{points:"0,0 60,0 30,50",fill:"#98FB98",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"30",y:"-10","text-anchor":"middle","font-size":"12",children:"[2, 5, 6]"}),(0,r.jsx)("text",{x:"30",y:"65","text-anchor":"middle","font-size":"10",children:"Triangle 3"})]}),(0,r.jsx)("path",{d:"M 200 180 L 200 220",stroke:"black","stroke-width":"2","marker-end":"url(#arrowhead)"}),(0,r.jsx)("text",{x:"200",y:"205","text-anchor":"middle","font-size":"12",children:"Sort sides"}),(0,r.jsx)("text",{x:"100",y:"260","font-size":"14","font-weight":"bold",children:"After Sorting:"}),(0,r.jsxs)("g",{transform:"translate(50, 280)",children:[(0,r.jsx)("rect",{x:"0",y:"0",width:"60",height:"30",fill:"#FFE4B5",stroke:"black","stroke-width":"1",rx:"5"}),(0,r.jsx)("text",{x:"30",y:"20","text-anchor":"middle","font-size":"12",children:"[2, 2, 3]"})]}),(0,r.jsxs)("g",{transform:"translate(150, 280)",children:[(0,r.jsx)("rect",{x:"0",y:"0",width:"60",height:"30",fill:"#FFE4B5",stroke:"black","stroke-width":"1",rx:"5"}),(0,r.jsx)("text",{x:"30",y:"20","text-anchor":"middle","font-size":"12",children:"[2, 2, 3]"})]}),(0,r.jsxs)("g",{transform:"translate(250, 280)",children:[(0,r.jsx)("rect",{x:"0",y:"0",width:"60",height:"30",fill:"#E6FFE6",stroke:"black","stroke-width":"1",rx:"5"}),(0,r.jsx)("text",{x:"30",y:"20","text-anchor":"middle","font-size":"12",children:"[2, 5, 6]"})]}),(0,r.jsx)("text",{x:"400",y:"260","font-size":"14","font-weight":"bold",children:"Distinct Triangles:"}),(0,r.jsxs)("g",{transform:"translate(400, 280)",children:[(0,r.jsx)("rect",{x:"0",y:"0",width:"80",height:"40",fill:"#FFD700",stroke:"black","stroke-width":"2",rx:"5"}),(0,r.jsx)("text",{x:"40",y:"20","text-anchor":"middle","font-size":"12","font-weight":"bold",children:"[2, 2, 3]"}),(0,r.jsx)("text",{x:"40",y:"35","text-anchor":"middle","font-size":"10",children:"Count: 2"})]}),(0,r.jsxs)("g",{transform:"translate(500, 280)",children:[(0,r.jsx)("rect",{x:"0",y:"0",width:"80",height:"40",fill:"#90EE90",stroke:"black","stroke-width":"2",rx:"5"}),(0,r.jsx)("text",{x:"40",y:"20","text-anchor":"middle","font-size":"12","font-weight":"bold",children:"[2, 5, 6]"}),(0,r.jsx)("text",{x:"40",y:"35","text-anchor":"middle","font-size":"10",children:"Count: 1"})]}),(0,r.jsx)("text",{x:"490",y:"360","text-anchor":"middle","font-size":"16","font-weight":"bold",fill:"#FF6347",children:(0,r.jsx)(t.p,{children:"Total Distinct Triangles: 2"})}),(0,r.jsx)("defs",{children:(0,r.jsx)("marker",{id:"arrowhead",markerWidth:"10",markerHeight:"7",refX:"9",refY:"3.5",orient:"auto",children:(0,r.jsx)("polygon",{points:"0 0, 10 3.5, 0 7",fill:"black"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"key-insight",children:"Key Insight"}),"\n",(0,r.jsx)(t.h3,{id:"the-sorting-strategy---a-visual-metaphor",children:"The Sorting Strategy - A Visual Metaphor"}),"\n",(0,r.jsxs)(t.p,{children:["Think of triangles as ",(0,r.jsx)(t.strong,{children:"puzzle pieces"}),". Even if you rotate or flip a puzzle piece, it's still the same piece. Similarly:"]}),"\n",(0,r.jsx)(t.mermaid,{value:'flowchart TD\n    Start["Triangle with sides a, b, c"]\n    Rotate1["Rotate: b, c, a"]\n    Rotate2["Rotate: c, a, b"]\n    Flip1["Flip: a, c, b"]\n    Flip2["Flip: b, a, c"]\n    Flip3["Flip: c, b, a"]\n    \n    Normalize["Sort sides: min, mid, max"]\n    \n    Start --\x3e Normalize\n    Rotate1 --\x3e Normalize\n    Rotate2 --\x3e Normalize\n    Flip1 --\x3e Normalize\n    Flip2 --\x3e Normalize\n    Flip3 --\x3e Normalize\n    \n    Normalize --\x3e Result["Canonical form:<br/>Same for all congruent triangles"]\n    \n    style Normalize fill:#90EE90\n    style Result fill:#FFD700'}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Two triangles are congruent if their corresponding sides are equal, regardless of order."})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"[2,3,4]"}),", ",(0,r.jsx)(t.code,{children:"[3,4,2]"}),", and ",(0,r.jsx)(t.code,{children:"[4,2,3]"})," represent the ",(0,r.jsx)(t.strong,{children:"same triangle"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Solution"}),": Normalize triangles by sorting their sides, then use a HashSet"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"step-by-step-algorithm-visualization",children:"Step-by-Step Algorithm Visualization"}),"\n",(0,r.jsx)(t.h3,{id:"algorithm-flow",children:"Algorithm Flow"}),"\n",(0,r.jsx)(t.mermaid,{value:'flowchart LR\n    subgraph "Step 1: Input"\n        I1["[2,2,3]"]\n        I2["[3,2,2]"]\n        I3["[2,5,6]"]\n    end\n    \n    subgraph "Step 2: Sort Each"\n        S1["[2,2,3]"]\n        S2["[2,2,3]"]\n        S3["[2,5,6]"]\n    end\n    \n    subgraph "Step 3: HashSet"\n        H["{<br/>\'2,2,3\',<br/>\'2,5,6\'<br/>}"]\n    end\n    \n    subgraph "Step 4: Count"\n        C["Size = 2"]\n    end\n    \n    I1 --\x3e S1\n    I2 --\x3e S2\n    I3 --\x3e S3\n    \n    S1 --\x3e H\n    S2 --\x3e H\n    S3 --\x3e H\n    \n    H --\x3e C\n    \n    style H fill:#E6E6FA\n    style C fill:#98FB98'}),"\n",(0,r.jsx)(t.h3,{id:"visual-walkthrough",children:"Visual Walkthrough"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(a.A,{value:"visual",label:"Visual Process",children:(0,r.jsxs)("svg",{viewBox:"0 0 800 600",xmlns:"http://www.w3.org/2000/svg",children:[(0,r.jsx)("text",{x:"400",y:"30","text-anchor":"middle","font-size":"18","font-weight":"bold",children:"Algorithm Process"}),(0,r.jsxs)("g",{transform:"translate(50, 60)",children:[(0,r.jsx)("text",{x:"0",y:"0","font-size":"14","font-weight":"bold",children:"Step 1: Process Triangle [2,2,3]"}),(0,r.jsx)("rect",{x:"0",y:"10",width:"100",height:"30",fill:"#FFE4E1",stroke:"black"}),(0,r.jsx)("text",{x:"50",y:"30","text-anchor":"middle","font-size":"12",children:"[2,2,3]"}),(0,r.jsx)("text",{x:"120",y:"30","font-size":"12",children:"\u2192 Sort \u2192 [2,2,3]"}),(0,r.jsx)("text",{x:"250",y:"30","font-size":"12",children:"\u2192 Add to HashSet"}),(0,r.jsx)("rect",{x:"380",y:"10",width:"120",height:"30",fill:"#E6E6FA",stroke:"black"}),(0,r.jsxs)("text",{x:"440",y:"30","text-anchor":"middle","font-size":"12",children:["HashSet: ","2,2,3"]})]}),(0,r.jsxs)("g",{transform:"translate(50, 120)",children:[(0,r.jsx)("text",{x:"0",y:"0","font-size":"14","font-weight":"bold",children:"Step 2: Process Triangle [3,2,2]"}),(0,r.jsx)("rect",{x:"0",y:"10",width:"100",height:"30",fill:"#FFE4E1",stroke:"black"}),(0,r.jsx)("text",{x:"50",y:"30","text-anchor":"middle","font-size":"12",children:"[3,2,2]"}),(0,r.jsx)("text",{x:"120",y:"30","font-size":"12",children:"\u2192 Sort \u2192 [2,2,3]"}),(0,r.jsx)("text",{x:"250",y:"30","font-size":"12",children:"\u2192 Already exists!"}),(0,r.jsx)("rect",{x:"380",y:"10",width:"120",height:"30",fill:"#E6E6FA",stroke:"black"}),(0,r.jsxs)("text",{x:"440",y:"30","text-anchor":"middle","font-size":"12",children:["HashSet: ","2,2,3"]})]}),(0,r.jsxs)("g",{transform:"translate(50, 180)",children:[(0,r.jsx)("text",{x:"0",y:"0","font-size":"14","font-weight":"bold",children:"Step 3: Process Triangle [2,5,6]"}),(0,r.jsx)("rect",{x:"0",y:"10",width:"100",height:"30",fill:"#98FB98",stroke:"black"}),(0,r.jsx)("text",{x:"50",y:"30","text-anchor":"middle","font-size":"12",children:"[2,5,6]"}),(0,r.jsx)("text",{x:"120",y:"30","font-size":"12",children:"\u2192 Sort \u2192 [2,5,6]"}),(0,r.jsx)("text",{x:"250",y:"30","font-size":"12",children:"\u2192 Add to HashSet"}),(0,r.jsx)("rect",{x:"380",y:"10",width:"150",height:"50",fill:"#E6E6FA",stroke:"black"}),(0,r.jsx)("text",{x:"455",y:"30","text-anchor":"middle","font-size":"12",children:"HashSet:"}),(0,r.jsx)("text",{x:"455",y:"45","text-anchor":"middle","font-size":"12",children:"2,5,6"})]}),(0,r.jsxs)("g",{transform:"translate(200, 280)",children:[(0,r.jsx)("rect",{x:"0",y:"0",width:"200",height:"60",fill:"#FFD700",stroke:"black","stroke-width":"2",rx:"10"}),(0,r.jsx)("text",{x:"100",y:"25","text-anchor":"middle","font-size":"16","font-weight":"bold",children:"Final Result"}),(0,r.jsx)("text",{x:"100",y:"45","text-anchor":"middle","font-size":"14",children:"Distinct Triangles: 2"})]})]})}),(0,r.jsx)(a.A,{value:"trace",label:"Execution Trace",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'Input: [[2,2,3], [3,2,2], [2,5,6]]\n\nInitialization:\n  uniqueTriangles = new HashSet<string>()\n\nIteration 1: triangle = [2,2,3]\n  1. Sort: [2,2,3] \u2192 [2,2,3]\n  2. Create key: "2,2,3"\n  3. Add to HashSet: {"2,2,3"}\n  4. HashSet size: 1\n\nIteration 2: triangle = [3,2,2]\n  1. Sort: [3,2,2] \u2192 [2,2,3]\n  2. Create key: "2,2,3"\n  3. Try to add: Already exists!\n  4. HashSet size: 1 (unchanged)\n\nIteration 3: triangle = [2,5,6]\n  1. Sort: [2,5,6] \u2192 [2,5,6]\n  2. Create key: "2,5,6"\n  3. Add to HashSet: {"2,2,3", "2,5,6"}\n  4. HashSet size: 2\n\nReturn: HashSet.Count = 2\n'})})})]}),"\n",(0,r.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="CountingTriangles.cs"',children:'using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass CountingTriangles \n{\n    static void Main(string[] args) \n    {\n        var test1 = new int[][] { new int[] {2, 2, 3}, new int[] {3, 2, 2}, new int[] {2, 5, 6} };\n        Console.WriteLine(CountDistinctTriangles(test1)); // 2\n    }\n\n    private static int CountDistinctTriangles(int[][] triangles) \n    {\n        var uniqueTriangles = new HashSet<string>();\n        \n        foreach (var triangle in triangles) \n        {\n            // Normalize by sorting sides\n            Array.Sort(triangle);\n            \n            // Create canonical string representation\n            string normalized = $"{triangle[0]},{triangle[1]},{triangle[2]}";\n            uniqueTriangles.Add(normalized);\n        }\n        \n        return uniqueTriangles.Count;\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"optimized-implementation-with-validation",children:"Optimized Implementation with Validation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="OptimizedCountingTriangles.cs"',children:'using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass OptimizedCountingTriangles \n{\n    private static int CountDistinctTriangles(int[][] triangles) \n    {\n        var uniqueTriangles = new HashSet<string>();\n        \n        foreach (var triangle in triangles) \n        {\n            // Validate triangle inequality theorem\n            if (IsValidTriangle(triangle)) \n            {\n                // Sort to create canonical form\n                Array.Sort(triangle);\n                \n                // Use custom hash for better performance\n                string hash = $"{triangle[0]}_{triangle[1]}_{triangle[2]}";\n                uniqueTriangles.Add(hash);\n            }\n        }\n        \n        return uniqueTriangles.Count;\n    }\n    \n    private static bool IsValidTriangle(int[] sides) \n    {\n        if (sides.Length != 3) return false;\n        \n        Array.Sort(sides);\n        // Triangle inequality: sum of two smaller sides > largest side\n        return sides[0] + sides[1] > sides[2];\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsx)(t.h3,{id:"time-complexity-visualization",children:"Time Complexity Visualization"}),"\n",(0,r.jsxs)("svg",{viewBox:"0 0 600 300",xmlns:"http://www.w3.org/2000/svg",children:[(0,r.jsx)("text",{x:"300",y:"30","text-anchor":"middle","font-size":"16","font-weight":"bold",children:"Time Complexity Breakdown"}),(0,r.jsx)("rect",{x:"50",y:"60",width:"150",height:"40",fill:"#FFE4B5",stroke:"black"}),(0,r.jsx)("text",{x:"125",y:"85","text-anchor":"middle","font-size":"12",children:"For each triangle: O(N)"}),(0,r.jsx)("rect",{x:"250",y:"60",width:"150",height:"40",fill:"#E6E6FA",stroke:"black"}),(0,r.jsx)("text",{x:"325",y:"85","text-anchor":"middle","font-size":"12",children:"Sort 3 sides: O(1)"}),(0,r.jsx)("rect",{x:"450",y:"60",width:"150",height:"40",fill:"#98FB98",stroke:"black"}),(0,r.jsx)("text",{x:"525",y:"85","text-anchor":"middle","font-size":"12",children:"HashSet add: O(1)"}),(0,r.jsx)("rect",{x:"200",y:"150",width:"200",height:"50",fill:"#FFD700",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"300",y:"180","text-anchor":"middle","font-size":"14","font-weight":"bold",children:"Total: O(N)"}),(0,r.jsx)("text",{x:"300",y:"230","text-anchor":"middle","font-size":"11",children:"N = number of triangles"}),(0,r.jsx)("text",{x:"300",y:"250","text-anchor":"middle","font-size":"11",children:"Sorting 3 elements is constant time!"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Complexity"}),": O(N) time, O(N) space where N is the number of triangles"]}),"\n",(0,r.jsx)(t.h2,{id:"edge-cases--validation",children:"Edge Cases & Validation"}),"\n",(0,r.jsx)(t.h3,{id:"triangle-inequality-theorem",children:"Triangle Inequality Theorem"}),"\n",(0,r.jsxs)("svg",{viewBox:"0 0 600 400",xmlns:"http://www.w3.org/2000/svg",children:[(0,r.jsx)("text",{x:"300",y:"30","text-anchor":"middle","font-size":"16","font-weight":"bold",children:"Triangle Validity Check"}),(0,r.jsxs)("g",{transform:"translate(100, 70)",children:[(0,r.jsx)("text",{x:"50",y:"0","text-anchor":"middle","font-size":"14","font-weight":"bold",fill:"green",children:"Valid: [3, 4, 5]"}),(0,r.jsx)("polygon",{points:"0,80 60,80 45,20",fill:"#90EE90",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"30",y:"95","text-anchor":"middle","font-size":"10",children:"3"}),(0,r.jsx)("text",{x:"-10",y:"50","font-size":"10",children:"4"}),(0,r.jsx)("text",{x:"55",y:"50","font-size":"10",children:"5"}),(0,r.jsx)("text",{x:"30",y:"115","text-anchor":"middle","font-size":"11",children:"3 + 4 > 5 \u2713"})]}),(0,r.jsxs)("g",{transform:"translate(350, 70)",children:[(0,r.jsx)("text",{x:"50",y:"0","text-anchor":"middle","font-size":"14","font-weight":"bold",fill:"red",children:"Invalid: [1, 2, 5]"}),(0,r.jsx)("line",{x1:"0",y1:"80",x2:"100",y2:"80",stroke:"red","stroke-width":"2"}),(0,r.jsx)("text",{x:"50",y:"95","text-anchor":"middle","font-size":"10",children:"5"}),(0,r.jsx)("text",{x:"0",y:"70","font-size":"10",children:"1"}),(0,r.jsx)("text",{x:"100",y:"70","font-size":"10",children:"2"}),(0,r.jsx)("text",{x:"50",y:"115","text-anchor":"middle","font-size":"11",children:"1 + 2 < 5 \u2717"}),(0,r.jsx)("text",{x:"50",y:"130","text-anchor":"middle","font-size":"10",fill:"red",children:"Cannot form triangle!"})]}),(0,r.jsx)("rect",{x:"150",y:"200",width:"300",height:"60",fill:"#FFFACD",stroke:"black","stroke-width":"1",rx:"5"}),(0,r.jsx)("text",{x:"300",y:"225","text-anchor":"middle","font-size":"12","font-weight":"bold",children:"Triangle Inequality Rule:"}),(0,r.jsx)("text",{x:"300",y:"245","text-anchor":"middle","font-size":"11",children:"Sum of any two sides must be greater"}),(0,r.jsx)("text",{x:"300",y:"260","text-anchor":"middle","font-size":"11",children:"than the third side"})]}),"\n",(0,r.jsx)(t.h2,{id:"practice-variations",children:"Practice Variations"}),"\n",(0,r.jsx)(t.h3,{id:"extension-problems",children:"Extension Problems"}),"\n",(0,r.jsx)(t.mermaid,{value:'graph TD\n    Base["Count Distinct Triangles"]\n    V1["Count Similar Triangles<br/>(same angles, different sizes)"]\n    V2["Group Triangles by Type<br/>(equilateral, isosceles, scalene)"]\n    V3["Find Largest/Smallest<br/>Distinct Triangle"]\n    V4["Count Triangles that<br/>Can Form Together"]\n    \n    Base --\x3e V1\n    Base --\x3e V2\n    Base --\x3e V3\n    Base --\x3e V4\n    \n    style Base fill:#FFD700\n    style V1 fill:#E6E6FA\n    style V2 fill:#E6E6FA\n    style V3 fill:#E6E6FA\n    style V4 fill:#E6E6FA'}),"\n",(0,r.jsx)(t.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsx)(t.h3,{id:"visual-summary",children:"Visual Summary"}),"\n",(0,r.jsxs)("svg",{viewBox:"0 0 700 200",xmlns:"http://www.w3.org/2000/svg",children:[(0,r.jsxs)("g",{transform:"translate(50, 50)",children:[(0,r.jsx)("circle",{cx:"30",cy:"30",r:"25",fill:"#90EE90",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"30",y:"35","text-anchor":"middle","font-size":"20","font-weight":"bold",children:"1"}),(0,r.jsx)("text",{x:"30",y:"70","text-anchor":"middle","font-size":"11","font-weight":"bold",children:"Canonical Form"}),(0,r.jsx)("text",{x:"30",y:"85","text-anchor":"middle","font-size":"10",children:"Sort to normalize"}),(0,r.jsx)("text",{x:"30",y:"100","text-anchor":"middle","font-size":"10",children:"representation"})]}),(0,r.jsxs)("g",{transform:"translate(250, 50)",children:[(0,r.jsx)("circle",{cx:"30",cy:"30",r:"25",fill:"#87CEEB",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"30",y:"35","text-anchor":"middle","font-size":"20","font-weight":"bold",children:"2"}),(0,r.jsx)("text",{x:"30",y:"70","text-anchor":"middle","font-size":"11","font-weight":"bold",children:"HashSet Power"}),(0,r.jsx)("text",{x:"30",y:"85","text-anchor":"middle","font-size":"10",children:"O(1) uniqueness"}),(0,r.jsx)("text",{x:"30",y:"100","text-anchor":"middle","font-size":"10",children:"detection"})]}),(0,r.jsxs)("g",{transform:"translate(450, 50)",children:[(0,r.jsx)("circle",{cx:"30",cy:"30",r:"25",fill:"#FFB6C1",stroke:"black","stroke-width":"2"}),(0,r.jsx)("text",{x:"30",y:"35","text-anchor":"middle","font-size":"20","font-weight":"bold",children:"3"}),(0,r.jsx)("text",{x:"30",y:"70","text-anchor":"middle","font-size":"11","font-weight":"bold",children:"Geometry Insight"}),(0,r.jsx)("text",{x:"30",y:"85","text-anchor":"middle","font-size":"10",children:"Congruent = same"}),(0,r.jsx)("text",{x:"30",y:"100","text-anchor":"middle","font-size":"10",children:"side lengths"})]})]}),"\n",(0,r.jsxs)(t.p,{children:["\u2705 ",(0,r.jsx)(t.strong,{children:"Canonical representation"})," - Normalize data before comparison",(0,r.jsx)(t.br,{}),"\n","\u2705 ",(0,r.jsx)(t.strong,{children:"Hash-based deduplication"})," - Efficient uniqueness detection",(0,r.jsx)(t.br,{}),"\n","\u2705 ",(0,r.jsx)(t.strong,{children:"Geometric understanding"})," - Congruent triangles have same side lengths\n\u2705 ",(0,r.jsx)(t.strong,{children:"Input validation"})," - Always check triangle inequality theorem\n\u2705 ",(0,r.jsx)(t.strong,{children:"Pattern recognition"})," - This technique works for any shape comparison"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>l});n(6540);var i=n(4164);const r={tabItem:"tabItem_Ymn6"};var s=n(4848);function l({children:e,hidden:t,className:n}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,n),hidden:t,children:e})}}}]);