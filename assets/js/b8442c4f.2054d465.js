"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2998],{1470:(e,n,t)=>{t.d(n,{A:()=>k});var r=t(6540),i=t(4164),s=t(3104),a=t(6347),l=t(205),o=t(7485),c=t(1682),d=t(679);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(i),(0,r.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})},[i,t])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=h(e),[a,o]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s})),[c,u]=p({queryString:t,groupId:i}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,d.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),j=(()=>{const e=c??x;return m({value:e,tabValues:s})?e:null})();(0,l.A)(()=>{j&&o(j)},[j]);return{selectedValue:a,selectValue:(0,r.useCallback)(e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)},[u,g,s]),tabValues:s}}var g=t(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function f({className:e,block:n,selectedValue:t,selectValue:r,tabValues:a}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),c=e=>{const n=e.currentTarget,i=l.indexOf(n),s=a[i].value;s!==t&&(o(n),r(s))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:r})=>(0,b.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...r,className:(0,i.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function y({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function v(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",j.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function k(e){const n=(0,g.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(n))}},7368:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"puzzles/contiguous-subarrays","title":"Contiguous Subarrays","description":"Problem Statement","source":"@site/docs/puzzles/contiguous-subarrays.mdx","sourceDirName":"puzzles","slug":"/puzzles/contiguous-subarrays","permalink":"/code-puzzles/docs/puzzles/contiguous-subarrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/contiguous-subarrays.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Change in a Foreign Currency","permalink":"/code-puzzles/docs/puzzles/change-in-a-foreign-currency"},"next":{"title":"Counting Triangles","permalink":"/code-puzzles/docs/puzzles/counting-triangles"}}');var i=t(4848),s=t(8453),a=t(1470),l=t(9365);const o={},c="Contiguous Subarrays",d={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Visual Understanding",id:"visual-understanding",level:2},{value:"Approach Evolution",id:"approach-evolution",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Optimized O(N) Solution",id:"optimized-on-solution",level:3},{value:"Algorithm Walkthrough",id:"algorithm-walkthrough",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Time Complexity: <strong>O(N)</strong>",id:"time-complexity-on",level:3},{value:"Space Complexity: <strong>O(N)</strong>",id:"space-complexity-on",level:3},{value:"Key Insights",id:"key-insights",level:2},{value:"Edge Cases",id:"edge-cases",level:2},{value:"Interview Strategy",id:"interview-strategy",level:2},{value:"What Interviewers Look For",id:"what-interviewers-look-for",level:3},{value:"Follow-Up Variations",id:"follow-up-variations",level:3},{value:"Advanced Applications",id:"advanced-applications",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2}];function h(e){const n={admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"contiguous-subarrays",children:"Contiguous Subarrays"})}),"\n","\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Given an array of ",(0,i.jsx)(n.strong,{children:"N unique integers"}),", for each index ",(0,i.jsx)(n.code,{children:"i"}),", determine the number of contiguous subarrays where:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The value at index ",(0,i.jsx)(n.code,{children:"i"})," is the ",(0,i.jsx)(n.strong,{children:"maximum element"})," in the subarray"]}),"\n",(0,i.jsxs)(n.li,{children:["The subarray ",(0,i.jsx)(n.strong,{children:"includes"})," index ",(0,i.jsx)(n.code,{children:"i"})," (starts from, ends at, or contains ",(0,i.jsx)(n.code,{children:"i"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Function Signature"}),": ",(0,i.jsx)(n.code,{children:"int[] CountSubarrays(int[] arr)"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Input"}),": Array of unique integers (1 \u2264 N \u2264 1,000,000)",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Output"}),": Array where each index contains the count of valid contiguous subarrays"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input: ",(0,i.jsx)(n.code,{children:"[3, 4, 1, 6, 2]"})]}),"\n",(0,i.jsxs)(n.li,{children:["Output: ",(0,i.jsx)(n.code,{children:"[1, 3, 1, 5, 1]"})]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"Real-World Applications",type:"tip",children:[(0,i.jsx)(n.p,{children:"This pattern appears in:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stock Analysis"}),": Finding periods where a stock was at its peak"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Metrics"}),": Identifying time windows where metrics were optimal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Gaming"}),": Score streak analysis and leaderboard calculations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Mining"}),": Peak detection in time series data"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"visual-understanding",children:"Visual Understanding"}),"\n",(0,i.jsxs)(n.p,{children:["For array ",(0,i.jsx)(n.code,{children:"[3, 4, 1, 6, 2]"}),", let's analyze index 1 (value = 4):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Subarrays where 4 is maximum and includes index 1:\n[4]         \u2705 Single element\n[3, 4]      \u2705 4 > 3, includes index 1\n[4, 1]      \u2705 4 > 1, includes index 1\n[3, 4, 1]   \u2705 4 is maximum, includes index 1\n\nResult for index 1: 3 subarrays\n"})}),"\n",(0,i.jsx)(n.h2,{id:"approach-evolution",children:"Approach Evolution"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(l.A,{value:"brute",label:"\u274c Brute Force O(N\xb2)",children:[(0,i.jsx)(n.p,{children:"For each index, check all possible subarrays:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"for (int i = 0; i < n; i++) {\n    for (int left = 0; left <= i; left++) {\n        for (int right = i; right < n; right++) {\n            // Check if arr[i] is max in subarray [left, right]\n        }\n    }\n}\n"})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issues"}),": Cubic time complexity, very inefficient"]})]}),(0,i.jsxs)(l.A,{value:"improved",label:"\u2705 Smart Boundaries O(N\xb2)",children:[(0,i.jsx)(n.p,{children:"Extend left and right until we hit a larger element:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"for (int i = 0; i < n; i++) {\n    // Extend left while elements are smaller\n    // Extend right while elements are smaller  \n    // Count all valid combinations\n}\n"})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Better"}),": Quadratic but practical for smaller inputs"]})]}),(0,i.jsxs)(l.A,{value:"optimal",label:"\ud83d\ude80 Monotonic Stack O(N)",children:[(0,i.jsx)(n.p,{children:"Use stack to find boundaries in linear time:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Find nearest greater element on left/right"}),"\n",(0,i.jsx)(n.li,{children:"Calculate contributions using boundary math"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key insight"}),": Each element pushed/popped once"]}),"\n"]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"optimized-on-solution",children:"Optimized O(N) Solution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="ContiguousSubarraysOptimal.cs"',children:'using System;\nusing System.Collections.Generic;\n\nclass ContiguousSubarrays \n{\n    static void Main(string[] args) \n    {\n        int[] arr = {3, 4, 1, 6, 2};\n        int[] result = CountSubarrays(arr);\n        Console.WriteLine("[" + string.Join(", ", result) + "]"); // [1, 3, 1, 5, 1]\n        \n        // Additional test cases\n        Console.WriteLine("[" + string.Join(", ", CountSubarrays(new int[]{5})) + "]"); // [1]\n        Console.WriteLine("[" + string.Join(", ", CountSubarrays(new int[]{1, 2, 3})) + "]"); // [1, 2, 3]\n    }\n    \n    private static int[] CountSubarrays(int[] arr) \n    {\n        int n = arr.Length;\n        int[] result = new int[n];\n        \n        // Find nearest greater elements on left and right\n        int[] leftGreater = FindLeftGreater(arr);\n        int[] rightGreater = FindRightGreater(arr);\n        \n        for (int i = 0; i < n; i++) \n        {\n            // Valid range where arr[i] can be maximum\n            int leftBound = leftGreater[i] + 1;   // First valid start position\n            int rightBound = rightGreater[i] - 1;  // Last valid end position\n            \n            // Count subarrays ending at i: from leftBound to i\n            int leftCount = i - leftBound + 1;\n            \n            // Count subarrays starting at i: from i to rightBound  \n            int rightCount = rightBound - i + 1;\n            \n            // Total (subtract 1 to avoid double counting single element)\n            result[i] = leftCount + rightCount - 1;\n        }\n        \n        return result;\n    }\n    \n    private static int[] FindLeftGreater(int[] arr) \n    {\n        int n = arr.Length;\n        int[] result = new int[n];\n        Stack<int> stack = new Stack<int>(); // Monotonic decreasing stack\n        \n        for (int i = 0; i < n; i++) \n        {\n            // Remove elements \u2264 current element\n            while (stack.Count > 0 && arr[stack.Peek()] <= arr[i]) \n            {\n                stack.Pop();\n            }\n            \n            // If stack empty, no greater element on left\n            result[i] = stack.Count == 0 ? -1 : stack.Peek();\n            stack.Push(i);\n        }\n        \n        return result;\n    }\n    \n    private static int[] FindRightGreater(int[] arr) \n    {\n        int n = arr.Length;\n        int[] result = new int[n];\n        Stack<int> stack = new Stack<int>(); // Monotonic decreasing stack\n        \n        // Process from right to left\n        for (int i = n - 1; i >= 0; i--) \n        {\n            // Remove elements \u2264 current element\n            while (stack.Count > 0 && arr[stack.Peek()] <= arr[i]) \n            {\n                stack.Pop();\n            }\n            \n            // If stack empty, no greater element on right\n            result[i] = stack.Count == 0 ? n : stack.Peek();\n            stack.Push(i);\n        }\n        \n        return result;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"algorithm-walkthrough",children:"Algorithm Walkthrough"}),"\n",(0,i.jsxs)(n.p,{children:["For array ",(0,i.jsx)(n.code,{children:"[3, 4, 1, 6, 2]"}),", let's trace index 3 (value = 6):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"1. Find left greater: leftGreater[3] = -1 (no element > 6 on left)\n2. Find right greater: rightGreater[3] = 5 (beyond array)\n\n3. Calculate bounds:\n   leftBound = -1 + 1 = 0    (can start from index 0)\n   rightBound = 5 - 1 = 4    (can end at index 4)\n\n4. Count subarrays:\n   leftCount = 3 - 0 + 1 = 4   (subarrays ending at 3)\n   rightCount = 4 - 3 + 1 = 2  (subarrays starting at 3)\n   \n5. Result = 4 + 2 - 1 = 5 \u2705\n"})}),"\n",(0,i.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,i.jsxs)(n.h3,{id:"time-complexity-on",children:["Time Complexity: ",(0,i.jsx)(n.strong,{children:"O(N)"})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Complexity"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Find Left Greater"})}),(0,i.jsx)(n.td,{children:"O(N)"}),(0,i.jsx)(n.td,{children:"Each element pushed/popped once"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Find Right Greater"})}),(0,i.jsx)(n.td,{children:"O(N)"}),(0,i.jsx)(n.td,{children:"Each element pushed/popped once"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Calculate Results"})}),(0,i.jsx)(n.td,{children:"O(N)"}),(0,i.jsx)(n.td,{children:"Single pass through array"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Overall"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"O(N)"})}),(0,i.jsx)(n.td,{children:"Linear time complexity"})]})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"space-complexity-on",children:["Space Complexity: ",(0,i.jsx)(n.strong,{children:"O(N)"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stack Space"}),": O(N) in worst case"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auxiliary Arrays"}),": O(N) for boundaries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Total"}),": ",(0,i.jsx)(n.strong,{children:"O(N)"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"key-insights",children:"Key Insights"}),"\n",(0,i.jsxs)(n.admonition,{title:"Monotonic Stack Magic",type:"info",children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why does this work?"})}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monotonic Property"}),": Stack maintains decreasing order"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Boundary Detection"}),": When we pop elements, we've found their right boundary"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Amortized O(1)"}),": Each element pushed/popped exactly once"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem Decomposition"}),": Split into left and right contributions"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"edge-cases",children:"Edge Cases"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Critical test cases:\nCountSubarrays(new int[]{5})        // [1] - single element\nCountSubarrays(new int[]{1, 2, 3})  // [1, 2, 3] - ascending\nCountSubarrays(new int[]{3, 2, 1})  // [3, 2, 1] - descending  \nCountSubarrays(new int[]{1, 5, 2})  // [1, 3, 1] - mountain peak\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interview-strategy",children:"Interview Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"what-interviewers-look-for",children:"What Interviewers Look For"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern Recognition"}),': "This is a monotonic stack problem"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem Decomposition"}),": Breaking into left/right contributions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Boundary Analysis"}),": Understanding valid ranges"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimization"}),": Moving from O(N\xb2) to O(N)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"follow-up-variations",children:"Follow-Up Variations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'"Count all subarrays where element is minimum"'})," \u2192 Similar approach, flip comparisons"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'"Find sum of all maximum elements"'})," \u2192 Multiply counts by values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'"Handle duplicate elements"'})," \u2192 Adjust boundary conditions"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-applications",children:"Advanced Applications"}),"\n",(0,i.jsx)(n.p,{children:"This monotonic stack pattern solves many problems:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Largest Rectangle in Histogram"})," - Find maximum rectangular area"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stock Span Problem"})," - Days since last higher stock price"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Next Greater Element"})," - Classical stack application"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sum of Subarray Minimums"})," - Aggregate minimum values"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Monotonic Stack Pattern"})," - Master tool for boundary problems",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Problem Decomposition"})," - Split complex counting into manageable parts",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Amortized Analysis"})," - Each element processed once despite nested loops",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Boundary Mathematics"})," - Count valid ranges efficiently",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Pattern Recognition"})," - Same technique applies to many array problems"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"This problem showcases how monotonic stacks can transform quadratic brute force solutions into elegant linear algorithms through careful analysis of element relationships and mathematical counting principles."})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var r=t(4164);const i={tabItem:"tabItem_Ymn6"};var s=t(4848);function a({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,t),hidden:n,children:e})}}}]);