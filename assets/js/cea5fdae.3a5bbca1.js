"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3797],{1470:(e,n,i)=>{i.d(n,{A:()=>C});var a=i(6540),t=i(4164),r=i(3104),s=i(6347),l=i(205),o=i(7485),c=i(1682),d=i(679);function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:i}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:i,default:a}})=>({value:e,label:n,attributes:i,default:a}))}(i);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,i])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const i=(0,s.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(t),(0,a.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})},[t,i])]}function x(e){const{defaultValue:n,queryString:i=!1,groupId:t}=e,r=u(e),[s,o]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=n.find(e=>e.default)??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r})),[c,h]=m({queryString:i,groupId:t}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[i,t]=(0,d.Dv)(n);return[i,(0,a.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),j=(()=>{const e=c??x;return p({value:e,tabValues:r})?e:null})();(0,l.A)(()=>{j&&o(j)},[j]);return{selectedValue:s,selectValue:(0,a.useCallback)(e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),g(e)},[h,g,r]),tabValues:r}}var g=i(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=i(4848);function f({className:e,block:n,selectedValue:i,selectValue:a,tabValues:s}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=s[t].value;r!==i&&(o(n),a(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=l.indexOf(e.currentTarget)+1;n=l[i]??l[0];break}case"ArrowLeft":{const i=l.indexOf(e.currentTarget)-1;n=l[i]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:s.map(({value:e,label:n,attributes:a})=>(0,b.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...a,className:(0,t.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":i===e}),children:n??e},e))})}function y({lazy:e,children:n,selectedValue:i}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===i);return e?(0,a.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function v(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,t.A)("tabs-container",j.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function C(e){const n=(0,g.A)();return(0,b.jsx)(v,{...e,children:h(e.children)},String(n))}},1486:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"puzzles/magical-candy-bars","title":"Magical Candy Bars","description":"Problem Statement","source":"@site/docs/puzzles/magical-candy-bars.mdx","sourceDirName":"puzzles","slug":"/puzzles/magical-candy-bars","permalink":"/docs/puzzles/magical-candy-bars","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/magical-candy-bars.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Largest Triple Products","permalink":"/docs/puzzles/largest-triple-products"},"next":{"title":"Matching Pairs","permalink":"/docs/puzzles/matching-pairs"}}');var t=i(4848),r=i(8453),s=i(1470),l=i(9365);const o={},c="Magical Candy Bars",d={},h=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Visual Understanding",id:"visual-understanding",level:2},{value:"Greedy Choice Visualization",id:"greedy-choice-visualization",level:3},{value:"Approach Breakdown",id:"approach-breakdown",level:2},{value:"Why is Greedy Optimal?",id:"why-is-greedy-optimal",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Step-by-Step Solution",id:"step-by-step-solution",level:3},{value:"Optimized Binary Heap Implementation",id:"optimized-binary-heap-implementation",level:3},{value:".NET 6+ PriorityQueue Solution",id:"net-6-priorityqueue-solution",level:3},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Time Complexity: <strong>O(N + k log N)</strong>",id:"time-complexity-on--k-log-n",level:3},{value:"Space Complexity: <strong>O(N)</strong>",id:"space-complexity-on",level:3},{value:"Edge Cases Deep Dive",id:"edge-cases-deep-dive",level:2},{value:"Overflow Considerations",id:"overflow-considerations",level:3},{value:"Bag Exhaustion Pattern",id:"bag-exhaustion-pattern",level:3},{value:"Interview Strategy",id:"interview-strategy",level:2},{value:"What Interviewers Look For",id:"what-interviewers-look-for",level:3},{value:"Follow-Up Questions",id:"follow-up-questions",level:3},{value:"Advanced Variations",id:"advanced-variations",level:2},{value:"1. <strong>Variable Refill Rates</strong>",id:"1-variable-refill-rates",level:3},{value:"2. <strong>Capacity Constraints</strong>",id:"2-capacity-constraints",level:3},{value:"3. <strong>Multiple Players</strong>",id:"3-multiple-players",level:3},{value:"4. <strong>Prediction Mode</strong>",id:"4-prediction-mode",level:3},{value:"Mathematical Insight",id:"mathematical-insight",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Practice Problems",id:"practice-problems",level:2}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"magical-candy-bars",children:"Magical Candy Bars"})}),"\n","\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["You have N bags of candy where the ith bag contains ",(0,t.jsx)(n.code,{children:"arr[i]"})," pieces of candy. Each bag is ",(0,t.jsx)(n.strong,{children:"magical"})," - it takes exactly 1 minute to eat all pieces in a bag (regardless of quantity), and immediately refills with ",(0,t.jsx)(n.code,{children:"floor(x/2)"})," pieces where x was the original count."]}),"\n",(0,t.jsxs)(n.p,{children:["Given ",(0,t.jsx)(n.code,{children:"k"})," minutes, determine the ",(0,t.jsx)(n.strong,{children:"maximum pieces of candy"})," you can eat."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Function Signature"}),": ",(0,t.jsx)(n.code,{children:"int maxCandies(int[] arr, int k)"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Input"}),": Array of N bags (1 \u2264 N \u2264 10,000), k minutes (1 \u2264 k \u2264 10,000), each ",(0,t.jsx)(n.code,{children:"arr[i]"})," (1 \u2264 arr[i] \u2264 1,000,000,000)",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output"}),": Maximum candy pieces consumable in k minutes"]}),"\n",(0,t.jsxs)(n.admonition,{title:"Real-World Applications",type:"tip",children:[(0,t.jsx)(n.p,{children:"This greedy optimization pattern appears in:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resource Allocation"}),": Distributing server capacity where resources regenerate"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Task Scheduling"}),": Prioritizing high-value tasks with diminishing returns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Investment Strategy"}),": Reinvesting profits with declining yields"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Game Development"}),": Resource management with regeneration mechanics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Load Balancing"}),": Processing highest-load servers first"]}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Master priority queue (max-heap) applications for greedy optimization"}),"\n",(0,t.jsx)(n.li,{children:"Understand greedy algorithm design principles and correctness proofs"}),"\n",(0,t.jsx)(n.li,{children:"Learn to handle large numbers and potential integer overflow scenarios"}),"\n",(0,t.jsx)(n.li,{children:"Practice simulation problems with dynamic state changes"}),"\n",(0,t.jsx)(n.li,{children:"Apply heap operations for maintaining optimal choices efficiently"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"visual-understanding",children:"Visual Understanding"}),"\n",(0,t.jsxs)(n.p,{children:["Let's trace through example: ",(0,t.jsx)(n.code,{children:"[2, 1, 7, 4, 2]"})," with ",(0,t.jsx)(n.code,{children:"k = 3"})," minutes"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Initial state: Bags = [2, 1, 7, 4, 2]\nMax-Heap: [7, 4, 2, 2, 1]\n\nMinute 1: \n  - Eat from bag with 7 candies \u2192 Total = 7\n  - Bag refills: 7 \u2192 floor(7/2) = 3\n  - Heap: [4, 3, 2, 2, 1]\n\nMinute 2:\n  - Eat from bag with 4 candies \u2192 Total = 7 + 4 = 11  \n  - Bag refills: 4 \u2192 floor(4/2) = 2\n  - Heap: [3, 2, 2, 2, 1]\n\nMinute 3:\n  - Eat from bag with 3 candies \u2192 Total = 11 + 3 = 14\n  - Bag refills: 3 \u2192 floor(3/2) = 1  \n  - Heap: [2, 2, 2, 1, 1]\n\nResult: 14 candies total\n"})}),"\n",(0,t.jsx)(n.h3,{id:"greedy-choice-visualization",children:"Greedy Choice Visualization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Why always choose the maximum bag?\n\nConsider: [10, 5] with k=2\n\nGreedy (optimal):\n  Minute 1: Take 10 \u2192 refills to 5 \u2192 Bags: [5, 5]\n  Minute 2: Take 5 \u2192 Total = 15\n\nAlternative (suboptimal):\n  Minute 1: Take 5 \u2192 refills to 2 \u2192 Bags: [10, 2]\n  Minute 2: Take 10 \u2192 Total = 15\n\nSame in this case, but greedy ensures we maximize early choices!\n"})}),"\n",(0,t.jsx)(n.h2,{id:"approach-breakdown",children:"Approach Breakdown"}),"\n",(0,t.jsx)(n.h3,{id:"why-is-greedy-optimal",children:"Why is Greedy Optimal?"}),"\n",(0,t.jsxs)(n.p,{children:["The magical candy problem demonstrates the ",(0,t.jsx)(n.strong,{children:"greedy choice property"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immediate Benefit"}),": Eating more candy now is always better"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Diminishing Returns"}),": Each bag's value halves after consumption"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Future Penalty"}),": Choosing the maximum now doesn't hurt future choices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Independent Decisions"}),": Each minute's choice is independent"]}),"\n"]}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsxs)(l.A,{value:"wrong",label:"\u274c Wrong Approaches",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Linear Search"}),": Find maximum each time"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// O(k \xd7 N) - inefficient for large inputs\nfor (int minute = 0; minute < k; minute++) {\n    int maxIndex = 0;\n    for (int i = 0; i < arr.Length; i++) {\n        if (arr[i] > arr[maxIndex]) maxIndex = i;\n    }\n    total += arr[maxIndex];\n    arr[maxIndex] /= 2; // This modifies the original array\n}\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Sort Every Time"}),": Re-sort after each consumption"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// O(k \xd7 N log N) - extremely inefficient\nfor (int minute = 0; minute < k; minute++) {\n    Array.Sort(arr, (a, b) => b.CompareTo(a));\n    total += arr[0];\n    arr[0] /= 2;\n}\n"})})]}),(0,t.jsxs)(l.A,{value:"correct",label:"\u2705 Optimal Approach",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Max-Heap"}),": Maintain maximum efficiently"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"var maxHeap = new PriorityQueue<int, int>(Comparer<int>.Create((a, b) => b.CompareTo(a)));\n// O(k log N) - optimal time complexity\n// Extract max, consume, refill, reinsert\n"})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.h3,{id:"step-by-step-solution",children:"Step-by-Step Solution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="MagicalCandyBars.cs"',children:'using System;\nusing System.Collections.Generic;\n\nclass MagicalCandyBars \n{\n    static void Main(string[] args) \n    {\n        // Test case 1: Basic example\n        int[] arr1 = {2, 1, 7, 4, 2};\n        int k1 = 3;\n        Console.WriteLine($"Input: [{string.Join(", ", arr1)}], k={k1}");\n        Console.WriteLine($"Output: {maxCandies(arr1, k1)}"); // Expected: 14\n        \n        // Test case 2: Larger values\n        int[] arr2 = {19, 78, 76, 72, 48, 8, 24, 74, 29};\n        int k2 = 3;\n        Console.WriteLine($"Input: [{string.Join(", ", arr2)}], k={k2}");\n        Console.WriteLine($"Output: {maxCandies(arr2, k2)}"); // Expected: 228\n        \n        // Test case 3: Edge case - single bag\n        int[] arr3 = {10};\n        int k3 = 4;\n        Console.WriteLine($"Input: [{string.Join(", ", arr3)}], k={k3}");\n        Console.WriteLine($"Output: {maxCandies(arr3, k3)}"); // Expected: 10+5+2+1=18\n    }\n    \n    private static long maxCandies(int[] arr, int k) \n    {\n        // Use SortedSet as max-heap (with custom comparer for descending order)\n        var maxHeap = new SortedSet<(long candies, int id)>(\n            Comparer<(long, int)>.Create((a, b) => {\n                // Primary: sort by candies descending  \n                int result = b.candies.CompareTo(a.candies);\n                if (result != 0) return result;\n                // Secondary: sort by id ascending (for tie-breaking)\n                return a.id.CompareTo(b.id);\n            })\n        );\n        \n        // Initialize heap with all bags (using unique IDs to handle duplicates)\n        for (int i = 0; i < arr.Length; i++) \n        {\n            maxHeap.Add((arr[i], i));\n        }\n        \n        long totalCandies = 0;\n        \n        // Simulate k minutes of eating\n        for (int minute = 0; minute < k; minute++) \n        {\n            // Edge case: no bags left with candy\n            if (maxHeap.Count == 0) break;\n            \n            // Get the bag with most candy\n            var (candyCount, bagId) = maxHeap.Max;\n            maxHeap.Remove(maxHeap.Max);\n            \n            // Eat all candy from this bag\n            totalCandies += candyCount;\n            \n            // Refill the bag with half the amount (floor division)\n            long refillAmount = candyCount / 2;\n            if (refillAmount > 0) \n            {\n                maxHeap.Add((refillAmount, bagId));\n            }\n            // If refillAmount is 0, bag is effectively empty - don\'t add back\n        }\n        \n        return totalCandies;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"optimized-binary-heap-implementation",children:"Optimized Binary Heap Implementation"}),"\n",(0,t.jsx)(n.p,{children:"For even better performance, we can implement a proper max-heap:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="OptimizedMagicalCandyBars.cs"',children:"using System;\nusing System.Collections.Generic;\n\nclass MagicalCandyBars \n{\n    private static long maxCandies(int[] arr, int k) \n    {\n        // Use binary heap implementation for O(log N) operations\n        var maxHeap = new MaxHeap();\n        \n        // Add all bags to heap\n        foreach (int candyCount in arr) \n        {\n            maxHeap.Insert(candyCount);\n        }\n        \n        long totalCandies = 0;\n        \n        for (int minute = 0; minute < k; minute++) \n        {\n            if (maxHeap.IsEmpty()) break;\n            \n            // Extract maximum candy count\n            long maxCandies = maxHeap.ExtractMax();\n            totalCandies += maxCandies;\n            \n            // Refill and insert back if not empty\n            long refill = maxCandies / 2;\n            if (refill > 0) \n            {\n                maxHeap.Insert(refill);\n            }\n        }\n        \n        return totalCandies;\n    }\n}\n\n// Custom MaxHeap implementation\nclass MaxHeap \n{\n    private List<long> heap = new List<long>();\n    \n    public void Insert(long value) \n    {\n        heap.Add(value);\n        BubbleUp(heap.Count - 1);\n    }\n    \n    public long ExtractMax() \n    {\n        if (heap.Count == 0) return 0;\n        \n        long max = heap[0];\n        heap[0] = heap[heap.Count - 1];\n        heap.RemoveAt(heap.Count - 1);\n        \n        if (heap.Count > 0) \n        {\n            BubbleDown(0);\n        }\n        \n        return max;\n    }\n    \n    public bool IsEmpty() => heap.Count == 0;\n    \n    private void BubbleUp(int index) \n    {\n        while (index > 0) \n        {\n            int parentIndex = (index - 1) / 2;\n            if (heap[parentIndex] >= heap[index]) break;\n            \n            Swap(parentIndex, index);\n            index = parentIndex;\n        }\n    }\n    \n    private void BubbleDown(int index) \n    {\n        while (true) \n        {\n            int largest = index;\n            int leftChild = 2 * index + 1;\n            int rightChild = 2 * index + 2;\n            \n            if (leftChild < heap.Count && heap[leftChild] > heap[largest]) \n            {\n                largest = leftChild;\n            }\n            \n            if (rightChild < heap.Count && heap[rightChild] > heap[largest]) \n            {\n                largest = rightChild;\n            }\n            \n            if (largest == index) break;\n            \n            Swap(index, largest);\n            index = largest;\n        }\n    }\n    \n    private void Swap(int i, int j) \n    {\n        (heap[i], heap[j]) = (heap[j], heap[i]);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"net-6-priorityqueue-solution",children:".NET 6+ PriorityQueue Solution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="ModernMagicalCandyBars.cs"',children:"using System;\nusing System.Collections.Generic;\n\nclass MagicalCandyBars \n{\n    private static long maxCandies(int[] arr, int k) \n    {\n        // .NET 6+ has built-in PriorityQueue\n        var maxHeap = new PriorityQueue<long, long>(\n            Comparer<long>.Create((a, b) => b.CompareTo(a)) // Max-heap\n        );\n        \n        // Enqueue all bags\n        foreach (int candyCount in arr) \n        {\n            maxHeap.Enqueue(candyCount, candyCount);\n        }\n        \n        long totalCandies = 0;\n        \n        for (int minute = 0; minute < k && maxHeap.Count > 0; minute++) \n        {\n            long maxCandies = maxHeap.Dequeue();\n            totalCandies += maxCandies;\n            \n            long refill = maxCandies / 2;\n            if (refill > 0) \n            {\n                maxHeap.Enqueue(refill, refill);\n            }\n        }\n        \n        return totalCandies;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,t.jsxs)(n.h3,{id:"time-complexity-on--k-log-n",children:["Time Complexity: ",(0,t.jsx)(n.strong,{children:"O(N + k log N)"})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Time"}),(0,t.jsx)(n.th,{children:"Frequency"}),(0,t.jsx)(n.th,{children:"Total"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Heap Construction"})}),(0,t.jsx)(n.td,{children:"O(N)"}),(0,t.jsx)(n.td,{children:"Once"}),(0,t.jsx)(n.td,{children:"O(N)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Extract Max"})}),(0,t.jsx)(n.td,{children:"O(log N)"}),(0,t.jsx)(n.td,{children:"k times"}),(0,t.jsx)(n.td,{children:"O(k log N)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Insert"})}),(0,t.jsx)(n.td,{children:"O(log N)"}),(0,t.jsx)(n.td,{children:"\u2264 k times"}),(0,t.jsx)(n.td,{children:"O(k log N)"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Overall"}),": O(N + k log N)"]}),"\n",(0,t.jsxs)(n.h3,{id:"space-complexity-on",children:["Space Complexity: ",(0,t.jsx)(n.strong,{children:"O(N)"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Heap Storage"}),": O(N) to store all candy bags"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Auxiliary Space"}),": O(1) for variables"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No recursion"}),": Iterative approach uses constant stack space"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"edge-cases-deep-dive",children:"Edge Cases Deep Dive"}),"\n",(0,t.jsx)(n.admonition,{title:"Critical Test Cases",type:"warning",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Test these scenarios thoroughly:\n\nmaxCandies([1], 1)       // 1 - single bag, single minute\nmaxCandies([1], 3)       // 1 - bag becomes empty after first minute  \nmaxCandies([10, 10], 1)  // 10 - multiple max bags (tie-breaking)\nmaxCandies([1000000000], 5) // Handle large numbers (overflow risk)\nmaxCandies([], 5)        // 0 - empty array edge case\nmaxCandies([5, 3, 1], 10) // Minutes > effective bag operations\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"overflow-considerations",children:"Overflow Considerations"}),"\n",(0,t.jsxs)(n.p,{children:["With ",(0,t.jsx)(n.code,{children:"arr[i]"})," up to 10^9 and multiple operations, use ",(0,t.jsx)(n.code,{children:"long"})," for accumulation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Potential overflow with int\nint total = 0;  // Risk: sum could exceed int.MaxValue\n\n// Safe approach with long  \nlong total = 0; // Can handle much larger sums\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bag-exhaustion-pattern",children:"Bag Exhaustion Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Bag with initial value C produces sequence:\nC \u2192 C/2 \u2192 C/4 \u2192 C/8 \u2192 ... \u2192 1 \u2192 0\n\nExample: Bag with 10 candies\nMinute 1: 10 candies \u2192 refills to 5\nMinute 2: 5 candies \u2192 refills to 2  \nMinute 3: 2 candies \u2192 refills to 1\nMinute 4: 1 candy \u2192 refills to 0 (bag exhausted)\n\nTotal from this bag: 10 + 5 + 2 + 1 = 18 \u2248 2 \xd7 original\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interview-strategy",children:"Interview Strategy"}),"\n",(0,t.jsx)(n.h3,{id:"what-interviewers-look-for",children:"What Interviewers Look For"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Greedy Recognition"}),': "We should always take the maximum available"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Structure Choice"}),": Max-heap for efficient maximum extraction"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Edge Case Awareness"}),": Empty bags, overflow, k > available operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optimization Discussion"}),": When to use custom heap vs built-in collections"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"follow-up-questions",children:"Follow-Up Questions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:'"What if bags regenerate differently?"'})," \u2192 Modify the refill logic, algorithm stays same"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:'"How would you handle negative candy counts?"'})," \u2192 Filter out or handle as zero"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:'"Can you optimize for memory?"'})," \u2192 In-place heap using the input array"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:'"What\'s the maximum possible candy?"'})," \u2192 Mathematical analysis of geometric series"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-variations",children:"Advanced Variations"}),"\n",(0,t.jsxs)(n.h3,{id:"1-variable-refill-rates",children:["1. ",(0,t.jsx)(n.strong,{children:"Variable Refill Rates"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Each bag has different regeneration: floor(x * rate[i])\npublic long maxCandiesWithRates(int[] arr, double[] rates, int k) { /* implement */ }\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"2-capacity-constraints",children:["2. ",(0,t.jsx)(n.strong,{children:"Capacity Constraints"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Can only eat up to C candies per minute total\npublic long maxCandiesWithCapacity(int[] arr, int capacity, int k) { /* implement */ }\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"3-multiple-players",children:["3. ",(0,t.jsx)(n.strong,{children:"Multiple Players"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// P players take turns, optimize for player 1\npublic long maxCandiesMultiPlayer(int[] arr, int k, int players) { /* implement */ }\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"4-prediction-mode",children:["4. ",(0,t.jsx)(n.strong,{children:"Prediction Mode"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Predict candies available after k minutes without consumption\npublic long predictAvailableCandies(int[] arr, int k) { /* implement */ }\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mathematical-insight",children:"Mathematical Insight"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Geometric Series Analysis"}),": For a bag with initial value C:"]}),"\n",(0,t.jsx)(n.p,{children:"Total candies obtainable = C + \u230aC/2\u230b + \u230aC/4\u230b + \u230aC/8\u230b + ..."}),"\n",(0,t.jsx)(n.p,{children:"This approaches the geometric series: C(1 + 1/2 + 1/4 + 1/8 + ...) = 2C"}),"\n",(0,t.jsxs)(n.p,{children:["So each bag can provide ",(0,t.jsx)(n.strong,{children:"at most 2\xd7 its initial value"})," over infinite time."]}),"\n",(0,t.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Greedy optimality"})," proven by exchange argument - no better strategy exists",(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Heap mastery"})," essential for problems requiring repeated maximum operations",(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Simulation approach"})," often cleaner than complex mathematical formulations",(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Overflow awareness"})," critical when dealing with large numbers and accumulation",(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Data structure trade-offs"})," between built-in collections and custom implementations"]}),"\n",(0,t.jsx)(n.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,t.jsx)(n.p,{children:"Master these related challenges:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/task-scheduler/",children:(0,t.jsx)(n.strong,{children:"Task Scheduler"})})," - Greedy scheduling with cooling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/meeting-rooms-ii/",children:(0,t.jsx)(n.strong,{children:"Meeting Rooms II"})})," - Heap-based interval management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/k-closest-points-to-origin/",children:(0,t.jsx)(n.strong,{children:"K Closest Points to Origin"})})," - Min-heap for top-k"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/reorganize-string/",children:(0,t.jsx)(n.strong,{children:"Reorganize String"})})," - Greedy character placement"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/ipo/",children:(0,t.jsx)(n.strong,{children:"IPO"})})," - Two heaps for profit maximization"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"This problem beautifully illustrates how greedy algorithms combined with efficient priority queues can solve dynamic optimization problems where making the locally optimal choice leads to the globally optimal solution!"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var a=i(6540);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},9365:(e,n,i)=>{i.d(n,{A:()=>s});i(6540);var a=i(4164);const t={tabItem:"tabItem_Ymn6"};var r=i(4848);function s({children:e,hidden:n,className:i}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(t.tabItem,i),hidden:n,children:e})}}}]);