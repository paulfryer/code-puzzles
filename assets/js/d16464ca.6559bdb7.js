"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3846],{1470:(e,n,s)=>{s.d(n,{A:()=>y});var t=s(6540),r=s(4164),a=s(3104),i=s(6347),l=s(205),c=s(7485),o=s(1682),d=s(679);function h(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:s,default:t}})=>({value:e,label:n,attributes:s,default:t}))}(s);return function(e){const n=(0,o.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,s])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const s=(0,i.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(r),(0,t.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})},[r,s])]}function g(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,a=u(e),[i,c]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find(e=>e.default)??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a})),[o,h]=m({queryString:s,groupId:r}),[g,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,r]=(0,d.Dv)(n);return[s,(0,t.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),j=(()=>{const e=o??g;return p({value:e,tabValues:a})?e:null})();(0,l.A)(()=>{j&&c(j)},[j]);return{selectedValue:i,selectValue:(0,t.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),x(e)},[h,x,a]),tabValues:a}}var x=s(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=s(4848);function v({className:e,block:n,selectedValue:s,selectValue:t,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),o=e=>{const n=e.currentTarget,r=l.indexOf(n),a=i[r].value;a!==s&&(c(n),t(a))},d=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;n=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;n=l[s]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:t})=>(0,b.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:o,...t,className:(0,r.A)("tabs__item",j.tabItem,t?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function k({lazy:e,children:n,selectedValue:s}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===s);return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function f(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,b.jsx)(v,{...n,...e}),(0,b.jsx)(k,{...n,...e})]})}function y(e){const n=(0,x.A)();return(0,b.jsx)(f,{...e,children:h(e.children)},String(n))}},3925:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"puzzles/balanced-brackets","title":"Balanced Brackets","description":"Problem Statement","source":"@site/docs/puzzles/balanced-brackets.mdx","sourceDirName":"puzzles","slug":"/puzzles/balanced-brackets","permalink":"/docs/puzzles/balanced-brackets","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/puzzles/balanced-brackets.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"1 Billion Users","permalink":"/docs/puzzles/billion-users"},"next":{"title":"Balanced Split","permalink":"/docs/puzzles/balanced-split"}}');var r=s(4848),a=s(8453),i=s(1470),l=s(9365);const c={},o="Balanced Brackets",d={},h=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Visual Understanding",id:"visual-understanding",level:2},{value:"Approach Breakdown",id:"approach-breakdown",level:2},{value:"Why Use a Stack?",id:"why-use-a-stack",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Step-by-Step Solution",id:"step-by-step-solution",level:3},{value:"Optimized Implementation",id:"optimized-implementation",level:3},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Time Complexity: <strong>O(n)</strong>",id:"time-complexity-on",level:3},{value:"Space Complexity: <strong>O(n)</strong>",id:"space-complexity-on",level:3},{value:"Edge Cases Deep Dive",id:"edge-cases-deep-dive",level:2},{value:"Common Mistake Patterns",id:"common-mistake-patterns",level:3},{value:"Interview Strategy",id:"interview-strategy",level:2},{value:"What Interviewers Look For",id:"what-interviewers-look-for",level:3},{value:"Follow-Up Questions",id:"follow-up-questions",level:3},{value:"Advanced Variations",id:"advanced-variations",level:2},{value:"1. <strong>Bracket Score Calculator</strong>",id:"1-bracket-score-calculator",level:3},{value:"2. <strong>Minimum Additions to Balance</strong>",id:"2-minimum-additions-to-balance",level:3},{value:"3. <strong>Wildcard Brackets</strong>",id:"3-wildcard-brackets",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Practice Problems",id:"practice-problems",level:2}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"balanced-brackets",children:"Balanced Brackets"})}),"\n","\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given a string of brackets (",(0,r.jsx)(n.code,{children:"()"}),", ",(0,r.jsx)(n.code,{children:"{}"}),", ",(0,r.jsx)(n.code,{children:"[]"}),"), determine if the sequence of brackets is ",(0,r.jsx)(n.strong,{children:"balanced"}),". A sequence is balanced when:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The sequence is empty, ",(0,r.jsx)(n.strong,{children:"OR"})]}),"\n",(0,r.jsxs)(n.li,{children:["The sequence is composed of two or more non-empty balanced sequences, ",(0,r.jsx)(n.strong,{children:"OR"})]}),"\n",(0,r.jsx)(n.li,{children:"The first and last brackets match, and the portion without them is also balanced"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Function Signature"}),": ",(0,r.jsx)(n.code,{children:"bool IsBalanced(string s)"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Input"}),": String ",(0,r.jsx)(n.code,{children:"s"})," with length between 1 and 1000",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Output"}),": A boolean indicating if the string is balanced"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Real-World Applications",type:"tip",children:[(0,r.jsx)(n.p,{children:"This fundamental algorithm powers:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Editors"}),": Syntax highlighting and bracket matching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compilers"}),": Expression parsing and validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mathematical Software"}),": Formula validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Web Browsers"}),": HTML/XML tag validation"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Understand stack data structure applications in parsing problems"}),"\n",(0,r.jsx)(n.li,{children:"Master bracket matching algorithms and validation techniques"}),"\n",(0,r.jsx)(n.li,{children:"Apply Last-In-First-Out (LIFO) principles to solve real-world problems"}),"\n",(0,r.jsx)(n.li,{children:"Learn to handle edge cases in string validation algorithms"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"visual-understanding",children:"Visual Understanding"}),"\n",(0,r.jsxs)(n.p,{children:["Let's trace through a balanced example: ",(0,r.jsx)(n.code,{children:'"{[()]}"'})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Step 1: { \u2192 Stack: ['{']\nStep 2: [ \u2192 Stack: ['{', '['] \nStep 3: ( \u2192 Stack: ['{', '[', '(']\nStep 4: ) \u2192 Stack: ['{', '[']     (matched '(' and ')')\nStep 5: ] \u2192 Stack: ['{']          (matched '[' and ']')\nStep 6: } \u2192 Stack: []             (matched '{' and '}')\nResult: Stack empty \u2705 BALANCED\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now an unbalanced example: ",(0,r.jsx)(n.code,{children:'"{(})"'})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Step 1: { \u2192 Stack: ['{']\nStep 2: ( \u2192 Stack: ['{', '(']\nStep 3: } \u2192 Stack: ['{', '(']     \n        \u274c ERROR: '}' doesn't match '('\nResult: UNBALANCED\n"})}),"\n",(0,r.jsx)(n.h2,{id:"approach-breakdown",children:"Approach Breakdown"}),"\n",(0,r.jsx)(n.h3,{id:"why-use-a-stack",children:"Why Use a Stack?"}),"\n",(0,r.jsxs)(n.p,{children:["The balanced brackets problem perfectly demonstrates the ",(0,r.jsx)(n.strong,{children:"Last-In-First-Out (LIFO)"})," principle:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Most recent opening"})," bracket should be ",(0,r.jsx)(n.strong,{children:"first to close"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Nested structure"})," requires tracking multiple levels"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sequential processing"})," with backtracking capability"]}),"\n"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(l.A,{value:"wrong",label:"\u274c Wrong Approach",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Simple Counter"}),": Count opening vs closing brackets"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// This FAILS for cases like \")(\" or \"([)]\"\nint count = 0;\nforeach (char c in s) {\n    if (c == '(' || c == '{' || c == '[') count++;\n    else count--;\n}\nreturn count == 0; // Wrong!\n"})})]}),(0,r.jsxs)(l.A,{value:"correct",label:"\u2705 Correct Approach",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Stack-Based Matching"}),": Track opening brackets and match in reverse order"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"Stack<char> stack = new Stack<char>();\n// Push opening brackets, pop and match closing brackets\n// Ensure proper nesting and order\n"})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"step-by-step-solution",children:"Step-by-Step Solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="BalancedBrackets.cs"',children:"using System;\nusing System.Collections.Generic;\n\nclass BalancedBrackets \n{\n    static void Main(string[] args) \n    {\n        // Test cases\n        Console.WriteLine(IsBalanced(\"{[()]}\")); // True - properly nested\n        Console.WriteLine(IsBalanced(\"{}()\"));   // True - separate sequences  \n        Console.WriteLine(IsBalanced(\"{(})\"));   // False - wrong order\n        Console.WriteLine(IsBalanced(\")\"));      // False - closing without opening\n        Console.WriteLine(IsBalanced(\"\"));       // True - empty is balanced\n    }\n    \n    private static bool IsBalanced(string s) \n    {\n        // Stack to track opening brackets\n        Stack<char> stack = new Stack<char>();\n        \n        // Process each character in the string\n        foreach (char c in s) \n        {\n            // If it's an opening bracket, push to stack\n            if (c == '(' || c == '{' || c == '[') \n            {\n                stack.Push(c);\n            }\n            // If it's a closing bracket, check for matching\n            else if (c == ')' || c == '}' || c == ']') \n            {\n                // No opening bracket to match\n                if (stack.Count == 0) \n                {\n                    return false;\n                }\n                \n                // Check if closing bracket matches the most recent opening\n                char opening = stack.Pop();\n                if (!IsMatchingPair(opening, c)) \n                {\n                    return false;\n                }\n            }\n            // Ignore any other characters\n        }\n        \n        // All brackets should be matched (stack should be empty)\n        return stack.Count == 0;\n    }\n    \n    private static bool IsMatchingPair(char opening, char closing) \n    {\n        return (opening == '(' && closing == ')') ||\n               (opening == '{' && closing == '}') ||\n               (opening == '[' && closing == ']');\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"optimized-implementation",children:"Optimized Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="BalancedBracketsOptimized.cs"',children:"using System;\nusing System.Collections.Generic;\n\nclass BalancedBrackets \n{\n    // Pre-computed mapping for O(1) lookup\n    private static readonly Dictionary<char, char> bracketPairs = \n        new Dictionary<char, char> {\n            { ')', '(' },\n            { '}', '{' },\n            { ']', '[' }\n        };\n    \n    private static bool IsBalanced(string s) \n    {\n        Stack<char> stack = new Stack<char>();\n        \n        foreach (char c in s) \n        {\n            // Opening brackets - push to stack\n            if (c == '(' || c == '{' || c == '[') \n            {\n                stack.Push(c);\n            }\n            // Closing brackets - check for match\n            else if (bracketPairs.ContainsKey(c)) \n            {\n                if (stack.Count == 0 || stack.Pop() != bracketPairs[c]) \n                {\n                    return false;\n                }\n            }\n            // Ignore non-bracket characters (if any)\n        }\n        \n        return stack.Count == 0;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsxs)(n.h3,{id:"time-complexity-on",children:["Time Complexity: ",(0,r.jsx)(n.strong,{children:"O(n)"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Single Pass"}),": Visit each character exactly once"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stack Operations"}),": Push/Pop are O(1) each"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dictionary Lookup"}),": Bracket pair matching is O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total"}),": Linear time relative to input length"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"space-complexity-on",children:["Space Complexity: ",(0,r.jsx)(n.strong,{children:"O(n)"})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Scenario"}),(0,r.jsx)(n.th,{children:"Stack Size"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Worst Case"})}),(0,r.jsx)(n.td,{children:"O(n)"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:'"(((("'})," - all opening brackets"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Best Case"})}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:'"()()"'})," - immediately matched pairs"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Average Case"})}),(0,r.jsx)(n.td,{children:"O(n/2)"}),(0,r.jsx)(n.td,{children:"Typical balanced expressions"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"edge-cases-deep-dive",children:"Edge Cases Deep Dive"}),"\n",(0,r.jsx)(n.admonition,{title:"Critical Test Cases",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Test your implementation with these cases:\n\nIsBalanced("")        // \u2705 true  - empty string\nIsBalanced("(")       // \u274c false - unmatched opening\nIsBalanced(")")       // \u274c false - unmatched closing  \nIsBalanced(")(")      // \u274c false - wrong order\nIsBalanced("([)]")    // \u274c false - interleaved brackets\nIsBalanced("{[()]}")  // \u2705 true  - properly nested\nIsBalanced("()[]")    // \u2705 true  - multiple balanced sequences\nIsBalanced("((()))")  // \u2705 true  - deeply nested same type\n'})})}),"\n",(0,r.jsx)(n.h3,{id:"common-mistake-patterns",children:"Common Mistake Patterns"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Off-by-one errors"}),": Not handling empty stack when popping"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Order sensitivity"}),": Missing that ",(0,r.jsx)(n.code,{children:")("}),"  is invalid even though counts match"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type mismatching"}),": Allowing ",(0,r.jsx)(n.code,{children:"([)]"})," when brackets interleave incorrectly"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interview-strategy",children:"Interview Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"what-interviewers-look-for",children:"What Interviewers Look For"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Immediate stack recognition"}),': "This is a stack problem"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Edge case handling"}),": Empty strings, single characters, wrong orders"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean implementation"}),": Readable, maintainable code structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimization awareness"}),": Dictionary lookup vs multiple if-statements"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"follow-up-questions",children:"Follow-Up Questions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"What if we have other characters mixed in?"'})," \u2192 Ignore non-bracket characters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"How would you extend this to handle quotes or comments?"'})," \u2192 State machine approach"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"Can you solve this without extra space?"'})," \u2192 Not optimally - stack is the right tool"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-variations",children:"Advanced Variations"}),"\n",(0,r.jsxs)(n.h3,{id:"1-bracket-score-calculator",children:["1. ",(0,r.jsx)(n.strong,{children:"Bracket Score Calculator"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Calculate nesting depth score: () = 1, (()) = 2, ()() = 2\npublic int CalculateScore(string s) { /* implement */ }\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-minimum-additions-to-balance",children:["2. ",(0,r.jsx)(n.strong,{children:"Minimum Additions to Balance"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Find minimum characters to add: "(((" \u2192 need 3 closing\npublic int MinAddToBalance(string s) { /* implement */ }\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"3-wildcard-brackets",children:["3. ",(0,r.jsx)(n.strong,{children:"Wildcard Brackets"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Handle '*' as opening, closing, or empty: \"(*))\" could be valid  \npublic bool IsValidWithWildcard(string s) { /* implement */ }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Stack = Natural fit"})," for nested, LIFO-ordered problems",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Dictionary optimization"})," improves readability and performance",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Early termination"})," prevents unnecessary computation",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Comprehensive testing"})," catches subtle edge cases",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Real-world relevance"})," in parsers, compilers, and editors"]}),"\n",(0,r.jsx)(n.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,r.jsx)(n.p,{children:"Master these related challenges:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/valid-parentheses/",children:(0,r.jsx)(n.strong,{children:"Valid Parentheses"})})," - Core problem"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/remove-invalid-parentheses/",children:(0,r.jsx)(n.strong,{children:"Remove Invalid Parentheses"})})," - Backtracking extension"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/longest-valid-parentheses/",children:(0,r.jsx)(n.strong,{children:"Longest Valid Parentheses"})})," - Dynamic programming variant"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/score-of-parentheses/",children:(0,r.jsx)(n.strong,{children:"Score of Parentheses"})})," - Stack with computation"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"This classic problem demonstrates how the right data structure (stack) makes a complex validation task elegant and efficient. Master this pattern to tackle parsing problems with confidence!"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},9365:(e,n,s)=>{s.d(n,{A:()=>i});s(6540);var t=s(4164);const r={tabItem:"tabItem_Ymn6"};var a=s(4848);function i({children:e,hidden:n,className:s}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,s),hidden:n,children:e})}}}]);